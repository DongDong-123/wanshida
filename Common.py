# -*- coding: utf-8 -*-
# @Time    : 2020-06-24 22:16
# @Author  : liudongyang
# @FileName: Common.py
# @Software: PyCharm
# 公共方法
import random
import time
import redis
from redis_data import RedisConnect
pool = RedisConnect()
from faker import Faker
fake = Faker(locale='zh_CN')

class CommonFunction:
    def __init__(self):
        self.rel_sctp = '2'
        self.year = time.strftime('%Y', time.localtime())
        self.month = time.strftime('%m', time.localtime())
        self.day = time.strftime('%d', time.localtime())

    def random_str(self, num):
        words = 'abcdefghijklmnopqrstuvwxyz'
        strs = ''.join(random.choices(words, k=num))
        return strs.capitalize()

    def person_fir_name(self):  # 个人客户first name
        name = self.random_str(random.randint(3,7))
        return name

    # 生成姓名数据
    def make_name_data(self, longth=None):
        first_name = random.choice([
            '赵', '钱', '孙', '李', '周', '吴', '郑', '王', '冯', '陈', '褚', '卫', '蒋', '沈', '韩', '杨', '朱', '秦', '尤', '许', '何',
            '吕',
            '施', '张', '孔', '曹', '严', '华', '金', '魏', '陶', '姜', '戚', '谢', '邹', '喻', '柏', '水', '窦', '章', '云', '苏', '潘',
            '葛',
            '奚', '范', '彭', '郎', '鲁', '韦', '昌', '马', '苗', '凤', '花', '方', '俞', '任', '袁', '柳', '酆', '鲍', '史', '唐', '费',
            '廉',
            '岑', '薛', '雷', '贺', '倪', '汤', '滕', '殷', '罗', '毕', '郝', '邬', '安', '常', '乐', '于', '时', '傅', '皮', '卞', '齐',
            '康',
            '伍', '余', '元', '卜', '顾', '孟', '平', '黄', '和', '穆', '萧', '尹', '姚', '邵', '湛', '汪', '祁', '毛', '禹', '狄', '米',
            '贝',
            '明', '臧', '计', '伏', '成', '戴', '谈', '宋', '茅', '庞', '熊', '纪', '舒', '屈', '项', '祝', '董', '粱', '杜', '阮', '蓝',
            '闵',
            '席', '季', '麻', '强', '贾', '路', '娄', '危', '江', '童', '颜', '郭', '梅', '盛', '林', '刁', '钟', '徐', '邱', '骆', '高',
            '夏',
            '蔡', '田', '樊', '胡', '凌', '霍', '虞', '万', '支', '柯', '昝', '管', '卢', '莫', '经', '房', '裘', '缪', '干', '解', '应',
            '宗',
            '丁', '宣', '贲', '邓', '郁', '单', '杭', '洪', '包', '诸', '左', '石', '崔', '吉', '钮', '龚', '程', '嵇', '邢', '滑', '裴',
            '陆',
            '荣', '翁', '荀', '羊', '於', '惠', '甄', '麴', '家', '封', '芮', '羿', '储', '靳', '汲', '邴', '糜', '松', '井', '段', '富',
            '巫',
            '乌', '焦', '巴', '弓', '牧', '隗', '山', '谷', '车', '侯', '宓', '蓬', '全', '郗', '班', '仰', '秋', '仲', '伊', '宫', '宁',
            '仇',
            '栾', '暴', '甘', '钭', '厉', '戎', '祖', '武', '符', '刘', '景', '詹', '束', '龙', '叶', '幸', '司', '韶', '郜', '黎', '蓟',
            '薄',
            '印', '宿', '白', '怀', '蒲', '邰', '从', '鄂', '索', '咸', '籍', '赖', '卓', '蔺', '屠', '蒙', '池', '乔', '阴', '欎', '胥',
            '能',
            '苍', '双', '闻', '莘', '党', '翟', '谭', '贡', '劳', '逄', '姬', '申', '扶', '堵', '冉', '宰', '郦', '雍', '舄', '璩', '桑',
            '桂',
            '濮', '牛', '寿', '通', '边', '扈', '燕', '冀', '郏', '浦', '尚', '农', '温', '别', '庄', '晏', '柴', '瞿', '阎', '充', '慕',
            '连',
            '茹', '习', '宦', '艾', '鱼', '容', '向', '古', '易', '慎', '戈', '廖', '庾', '终', '暨', '居', '衡', '步', '都', '耿', '满',
            '弘',
            '匡', '国', '文', '寇', '广', '禄', '阙', '东', '殴', '殳', '沃', '利', '蔚', '越', '夔', '隆', '师', '巩', '厍', '聂', '晁',
            '勾',
            '敖', '融', '冷', '訾', '辛', '阚', '那', '简', '饶', '空', '曾', '毋', '沙', '乜', '养', '鞠', '须', '丰', '巢', '关', '蒯',
            '相',
            '查', '後', '荆', '红', '游', '竺', '权', '逯', '盖', '益', '桓', '公', '万俟', '司马', '上官', '欧阳', '夏侯', '诸葛', '闻人', '东方',
            '赫连', '皇甫', '尉迟', '公羊', '澹台', '公冶', '宗政', '濮阳', '淳于', '单于', '太叔', '申屠', '公孙', '仲孙', '轩辕', '令狐', '钟离', '宇文',
            '长孙', '慕容', '鲜于', '闾丘', '司徒', '司空', '亓官', '司寇', '仉', '督', '子车', '颛孙', '端木', '巫马', '公西', '漆雕', '乐正', '壤驷',
            '公良',
            '拓跋', '夹谷', '宰父', '谷梁', '晋', '楚', '闫', '法', '汝', '鄢', '涂', '钦', '段干', '百里', '东郭', '南门', '呼延', '归', '海',
            '羊舌',
            '微生', '岳', '帅', '缑', '亢', '况', '后', '有', '琴', '梁丘', '左丘', '东门', '西门', '商', '牟', '佘', '佴', '伯', '赏', '南宫',
            '墨',
            '哈', '谯', '笪', '年', '爱', '阳', '佟', '第五', '言', '福', '卓', '蔺', '屠', '蒙', '池', '乔', '阳', '郁', '胥', '能', '苍',
            '双',
            '闻', '莘', '党', '翟', '谭', '贡', '劳', '逄', '姬', '申', '扶', '堵', '冉', '宰', '郦', '雍', '却', '璩', '桑', '桂', '濮',
            '牛',
            '寿', '通', '边', '扈', '燕', '冀', '僪', '浦', '尚', '农', '温', '别', '庄', '晏', '柴', '瞿', '阎', '充', '慕', '连', '茹',
            '习',
            '宦', '艾', '鱼', '容', '向', '古', '易', '慎', '戈', '庾', '终', '暨', '居', '衡', '步都', '耿', '满', '弘', '匡', '国', '文',
            '寇',
            '广', '禄', '阙', '东欧', '殳', '沃', '利', '蔚', '越', '夔', '隆', '师', '巩', '厍', '聂晁', '勾', '敖', '融', '冷', '訾', '辛',
            '阚',
            '那', '简', '饶', '空曾', '毋', '沙', '乜', '养', '鞠', '须', '丰', '巢', '关', '蒯', '相查', '后', '荆', '红', '游', '竺', '权',
            '逮',
            '盍', '益', '桓', '公', '唱'])
        second_name = random.choice([
            '一', '是', '我', '不', '在', '人', '们', '有', '来', '他', '这', '上', '着', '个', '地', '到',
            '大', '里', '说', '去', '子', '得', '也', '和', '那', '要', '下', '看', '天', '时', '过', '出',
            '小', '么', '起', '你', '都', '把', '好', '还', '多', '没', '为', '又', '可', '家', '学', '只',
            '以', '主', '会', '样', '年', '想', '能', '生', '同', '老', '中', '从', '自', '面', '前', '头',
            '到', '它', '后', '然', '走', '很', '像', '见', '两', '用', '国', '动', '进', '成', '回', '什',
            '边', '作', '对', '开', '而', '已', '些', '现', '山', '民', '候', '经', '发', '工', '向', '事',
            '命', '给', '长', '水', '义', '三', '声', '于', '高', '正', '手', '知', '理', '眼', '志', '点',
            '心', '战', '二', '问', '但', '身', '方', '实', '做', '叫', '当', '住', '听', '革', '打', '呢',
            '真', '党', '全', '才', '四', '已', '所', '敌', '之', '最', '光', '产', '情', '路', '分', '总',
            '条', '白', '话', '东', '席', '次', '亲', '如', '被', '花', '口', '放', '儿', '常', '西', '气',
            '五', '第', '使', '写', '军', '吧', '文', '运', '在', '果', '怎', '定', '许', '快', '明', '行',
            '因', '别', '飞', '外', '树', '物', '活', '部', '门', '无', '往', '船', '望', '新', '带', '队',
            '先', '力', '完', '间', '却', '站', '代', '员', '机', '更', '九', '每', '风', '级', '跟', '笑',
            '啊', '孩', '万', '少', '直', '意', '夜', '比', '阶', '连', '车', '重', '便', '斗', '马', '哪',
            '化', '太', '指', '变', '社', '似', '士', '者', '干', '石', '满', '决', '百', '原', '群',
            '究', '各', '六', '本', '思', '解', '立', '河', '爸', '村', '八', '难', '早', '论', '根',
            '共', '让', '相', '研', '今', '其', '书', '接', '应', '关', '信', '觉', '步', '反', '处',
            '记', '将', '千', '找', '争', '领', '或', '师', '结', '块', '跑', '谁', '草', '越', '字', '加',
            '紧', '爱', '等', '习', '阵', '月', '青', '半', '火', '法', '题', '建', '赶', '位',
            '唱', '海', '七', '任', '件', '感', '准', '张', '团', '屋', '离', '片', '科', '倒', '睛', '利',
            '世', '刚', '且', '由', '送', '切', '星', '晚', '表', '够', '整', '认', '响', '雪', '流', '未',
            '场', '该', '并', '底', '深', '刻', '平', '伟', '忙', '提', '确', '近', '亮', '轻', '讲', '农',
            '古', '黑', '告', '界', '拉', '名', '呀', '土', '清', '阳', '照', '办', '史', '改', '历', '转',
            '画', '造', '嘴', '此', '治', '北', '必', '服', '雨', '穿', '内', '识', '验', '传', '业', '菜', '兴'])
        last_name = random.choice([
            '命', '给', '长', '水', '义', '三', '声', '于', '高', '正', '手', '知', '理', '眼', '志', '点',
            '心', '战', '二', '问', '但', '身', '方', '实', '做', '叫', '当', '住', '听', '革', '打', '呢',
            '真', '党', '全', '才', '四', '已', '所', '敌', '之', '最', '光', '产', '情', '路', '分', '总',
            '条', '白', '话', '东', '席', '次', '亲', '如', '被', '花', '口', '放', '儿', '常', '西', '气',
            '五', '第', '使', '写', '军', '吧', '文', '运', '在', '果', '怎', '定', '许', '快', '明', '行',
            '因', '别', '飞', '外', '树', '物', '活', '部', '门', '无', '往', '船', '望', '新', '带', '队',
            '先', '力', '完', '间', '却', '站', '代', '员', '机', '更', '九', '每', '风', '级', '跟', '笑',
            '啊', '孩', '万', '少', '直', '意', '夜', '比', '阶', '连', '车', '重', '便', '斗', '马', '哪',
            '化', '太', '指', '变', '社', '似', '士', '者', '干', '石', '满', '决', '百', '原', '群',
            '究', '各', '六', '本', '思', '解', '立', '河', '爸', '村', '八', '难', '早', '论', '根',
            '共', '让', '相', '研', '今', '其', '书', '接', '应', '关', '信', '觉', '步', '反', '处',
            '记', '将', '千', '找', '争', '领', '或', '师', '结', '块', '跑', '谁', '草', '越', '字'])
        fouth_name = random.choice([
            '命', '给', '长', '水', '义', '三', '声', '于', '高', '正', '手', '知', '理', '眼', '志', '点',
            '心', '战', '二', '问', '但', '身', '方', '实', '做', '叫', '当', '住', '听', '革', '打', '呢',
            '真', '党', '全', '才', '四', '已', '所', '敌', '之', '最', '光', '产', '情', '路', '分', '总',
            '条', '白', '话', '东', '席', '次', '亲', '如', '被', '花', '口', '放', '儿', '常', '西', '气',
            '五', '第', '使', '写', '军', '吧', '文', '运', '在', '果', '怎', '定', '许', '快', '明', '行',
            '因', '别', '飞', '外', '树', '物', '活', '部', '门', '无', '往', '船', '望', '新', '带', '队',
            '先', '力', '完', '间', '却', '站', '代', '员', '机', '更', '九', '每', '风', '级', '跟', '笑',
            '啊', '孩', '万', '少', '直', '意', '夜', '比', '阶', '连', '车', '重', '便', '斗', '马', '哪',
            '五', '第', '使', '写', '军', '吧', '文', '运', '在', '果', '怎', '定', '许', '快', '明', '行',
            '因', '别', '飞', '外', '树', '物', '活', '部', '门', '无', '往', '船', '望', '新', '带', '队',
            '先', '力', '完', '间', '却', '站', '代', '员', '机', '更', '九', '每', '风', '级', '跟', '笑',
            '啊', '孩', '万', '少', '直', '意', '夜', '比', '阶', '连', '车', '重', '便', '斗', '马', '哪',
            '化', '太', '指', '变', '社', '似', '士', '者', '干', '石', '满', '决', '百', '原', '群',
            '究', '各', '六', '本', '思', '解', '立', '河', '爸', '村', '八', '难', '早', '论', '根',
            '共', '让', '相', '研', '今', '其', '书', '接', '应', '关', '信', '觉', '步', '反', '处',
        ])
        if longth == 4:
            return first_name + second_name + last_name + fouth_name
        else:
            return first_name + second_name + last_name

    def org_name(self):  # 机构客户名称
        name = [self.random_str(random.randint(4,7)) for i in range(random.randint(3,5))]
        return ' '.join(name)

    def relation_type(self):
        '''
        关系人类型，个人关系、机构关系，其他
        :return:
        '''
        cust_type = ''
        if cust_type == 1:
            relation_type = random.choice([
                'B01',  # 夫妻关系
                'B02',  # 子女
                'B03',  # 父母
                'B04',  # 其他血亲
                'B05',  # 其他姻亲
                'B06',  # 同学
                'B07' ] # 朋友
            )
        elif cust_type == 2:
            relation_type = random.choice([
                'A01',  # 对公客户与法人代表
                'A02',  # 对公客户与联系人
                'A03',  # 对公客户与负责人
                'A04',  # 对公客户与董事
                'A05',  # 对公客户与股东
                'A06',  # 母公司与子公司
                'A07',  # 代理
                'A08',  # 投资与被投资
                'A09',  # 其他关联单位
                'A10',  # 企业团体
                'A11',  # 银行团体
                'A12' ] # 家族企业
            )
        else:
            relation_type = random.choice(
                  ['X',  # 未说明
                'C01']  # 受益所有人
            )

        return relation_type


    def rel_layer(self):
        layer = random.randint(0,5)
        return layer

    def cert_type(self):  # 证件类型
        if self.rel_sctp == '1':
            cstp = random.choice([
            '11',  # 居民身份证或临时身份证
            '12',  # 军人或武警身份证件
            '13',  # 港澳台通行证
            '14',  # 外国公民护照
            '19' # 其他个人有效证件(需进一步说明)
            ]
        )
        else:
            cstp = random.choice([
                '21',  # 组织机构代码
                '29']  # 其他机构代码(需进一步说明)
            )
        return cstp

    def random_post(self):
        return random.choice([
            "职员",
            "组长",
            "经理",
            "副经理",
            "工程师",
            ""
        ])

    def cert_explain(self, cert_type):
        """
        证件类型，传入证件种类代码，返回中文名称
        :param cert_type:
        :return:
        """
        exp = {'11': "居民身份证或临时身份证", '12': "军人或武警身份证件", '13': "港澳台通行证", '14': "外国公民护照", '19': "其他个人有效证件(需进一步说明)"}
        return exp.get(cert_type, '19')


    def person_cert_num(self):  # 个人证件号码
        ctid = self.random_num(18)

        return ctid

    def org_cert_num(self,num=9):  # 机构证件号码 默认9位数字字母组合
        strs = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        nums = '0123456789'
        n = random.randint(3,6)
        cert = ''.join(random.choices(strs,k=n)) + ''.join(random.choices(nums, k=(num-n)))
        return cert

    def make_date(self, beg=-3, end=20, length=8):
        '''制造 日期相关数据，可随机生成往前、往后的日期数据，默认日期格式yyyymmdd，可通过length设置格式，
        length=10, yyyy-mm-dd,
        '''
        # 年
        make_year = int(self.year) + random.randint(beg, end)
        # 月
        make_month = int(self.month) + random.randint(0,11)
        if make_month > 12:
            make_month = make_month % 12

        # 日
        make_day = int(self.day) + random.randint(-5, 10)
        if make_day < 0:
            make_day = -make_day
        elif make_day == 0:
            make_day = 1
        else:
            if make_month == 2 and make_day > 28:
                make_day = make_day % 28
            elif make_month in (4,6,9,11) and make_day >30:
                make_day = make_day % 30
            elif make_day > 31:
                make_day = make_day % 31

        # 转为字符串
        make_year = str(make_year)

        if make_month < 10:
            make_month = '0' + str(make_month)
        else:
            make_month = str(make_month)

        if make_day < 10:
            make_day = '0' + str(make_day)
        else:
            make_day = str(make_day)
        if length == 10:
            return '-'.join([make_year, make_month, make_day])
        else:
            return make_year + make_month + make_day

    def end_date(self, typ, dat):
        """结束日期"""
        from datetime import date
        if typ == 'c':
            begin_date = date(year=int(dat[:4]),month=int(dat[4:6]),day=int(dat[6:]))
            dd = fake.date_between(begin_date)
        else:
            dd = ''
        return dd


    # 国籍
    def chiose_country(self):
        countrys = random.choice([
            'CHN', 'ALB', 'DZA', 'AFG', 'ARG', 'ARE', 'ABW', 'OMN', 'AZE', 'EGY', 'ETH', 'IRL', 'EST', 'AND', 'AGO', 'AIA', 'ATG', 'AUT', 'ALA', 'AUS', 'MAC', 'BRB', 'PNG', 'BHS', 'PAK', 'PRY', 'PSE', 'BHR', 'PAN', 'BRA', 'BLR', 'BMU', 'BGR', 'MNP', 'BEN', 'BEL', 'ISL', 'PRI', 'BIH', 'POL', 'BOL', 'BLZ', 'BWA', 'BTN', 'BFA', 'BDI', 'BVT', 'PRK', 'GNQ', 'DNK', 'DEU', 'TLS', 'TGO', 'DOM', 'DMA', 'RUS', 'ECU', 'ERI', 'FRA', 'FRO', 'PYF', 'GUF', 'ATF', 'MAF', 'VAT', 'PHL', 'FJI', 'FIN', 'CPV', 'GMB', 'COG', 'COD', 'COL', 'CRI', 'GRD', 'GRL', 'GEO', 'GGY', 'CUB', 'GLP', 'GUM', 'GUY', 'KAZ', 'HTI', 'KOR', 'NLD', 'BES', 'SXM', 'HMD', 'MNE', 'HND', 'KIR', 'DJI', 'KGZ', 'GIN', 'GNB', 'CAN', 'GHA', 'GAB', 'KHM', 'CZE', 'ZWE', 'CMR', 'QAT', 'CYM', 'CCK', 'COM', 'CIV', 'KWT', 'HRV', 'KEN', 'COK', 'CUW', 'LVA', 'LSO', 'LAO', 'LBN', 'LTU', 'LBR', 'LBY', 'LIE', 'REU', 'LUX', 'RWA', 'ROU', 'MDG', 'IMN', 'MDV', 'FLK', 'MLT', 'MWI', 'MYS', 'MLI', 'MKD', 'MHL', 'MTQ', 'MYT', 'MUS', 'MRT', 'USA', 'UMI', 'ASM', 'VIR', 'MNG', 'MSR', 'BGD', 'PER', 'FSM', 'MMR', 'MDA', 'MAR', 'MCO', 'MOZ', 'MEX', 'NKR', 'NAM', 'ZAF', 'ATA', 'SGS', 'SSD', 'NRU', 'NPL', 'NIC', 'NER', 'NGA', 'NIU', 'NOR', 'NFK', 'PLW', 'PCN', 'PRT', 'JPN', 'SWE', 'CHE', 'SLV', 'WSM', 'SRB', 'SLE', 'SEN', 'CYP', 'SYC', 'SAU', 'BLM', 'CXR', 'STP', 'SHN', 'KNA', 'LCA', 'SMR', 'SPM', 'VCT', 'LKA', 'SVK', 'SVN', 'SJM', 'SWZ', 'SDN', 'SUR', 'SLB', 'SOM', 'TJK', 'THA', 'TZA', 'TON', 'TCA', 'TTO', 'TUN', 'TUV', 'TUR', 'TKM', 'TKL', 'WLF', 'VUT', 'GTM', 'VEN', 'BRN', 'UGA', 'UKR', 'URY', 'UZB', 'ESP', 'ESH', 'GRC', 'HKG', 'SGP', 'NCL', 'NZL', 'HUN', 'SYR', 'JAM', 'ARM', 'YEM', 'IRQ', 'IRN', 'ISR', 'ITA', 'IND', 'IDN', 'GBR', 'VGB', 'IOT', 'JOR', 'VNM', 'ZMB', 'JEY', 'TCD', 'GIB', 'CHL', 'CAF', 'TWN'])
        return countrys

    def data_time(self):
        '''数据生成时间'''
        datatime = time.strftime('%Y%m%d%H%M%S', time.localtime())
        return datatime

    def random_num(self, num):
        ''' 接收int类型参数num，根据参数随机生成数字,返回字符串,不以0开头'''
        res_list = []
        while len(res_list) < num:
            elem = random.randint(0, 9)
            if res_list or elem:
                res_list.append(str(elem))

        return ''.join(res_list)

    def random_num_head_0(self, num):
        ''' 接收int类型参数num，根据参数随机生成数字,返回字符串,可以以0开头'''
        res_list = []
        while len(res_list) < num:
            elem = random.randint(0, 9)
            res_list.append(str(elem))

        return ''.join(res_list)


    def random_word_num_or_str(self, num):
        '''
        随机生成指定位数的字母、数字组合，字母不区分大小写，
        返回字符串
        '''

        if num < 1:
            raise ValueError('{} must be bigger than 0'.format(num))
        words = 'abcdefghigklmnopqrstuvwxyz01123456789'
        temp = []
        while len(temp) < num:
            temp.append(random.choice(list(words)))
        return ''.join(temp)


    # 电话号码数据
    def make_tel_num(self, tp=11):
        '''
        随机生成手机号码
        11:家庭电话
        12:工作电话
        21:固定电话
        22:移动电话
        23:传真
        :return: 返回字符串类型
        '''
        if tp == '21' or tp == '23':
            phone = self.random_num(9)
        else:
            one_two = random.choice(['13', '14', '15', '16', '17', '18', '19'])
            three_nine = []
            for num in range(9):
                elem = random.randint(0, 9)
                three_nine.append(str(elem))
            phone = one_two + ''.join(three_nine)
        return phone

    # 邮箱数据
    def make_email_data(self):
        extend = random.choice(['163.com', '126.com', 'gmail.com', 'qq.com', 'sina.com', 'outlook.com'])
        name_1 = self.random_str(6)
        name_2 = self.random_num(6)
        return name_1 + '_' + name_2 + '@' + extend


    def make_address(self, code=None):
        '''
        # 地址数据
        :param code: 省市区代码
        :return: 详细地址
        '''
        if not code:
            code = self.random_city()
        three_level_addr = pool.get_data(code)
        if three_level_addr and '-' in three_level_addr:
            three_level_addr.replace('-', '')
        street_address = random.choice([
            '解放路', '千佛山', '趵突泉', '泉城路', '大明湖', '东关', '文东', '建新', '甸柳', '燕山', '姚家', '龙洞', '智远', '舜华路', '大观园', '杆石桥',
            '四里村',
            '魏家庄', '二七', '七里山', '六里山', '舜玉路', '泺源', '王官庄', '舜耕', '白马山', '七贤', '十六里河', '兴隆', '党家', '陡沟', '振兴街', '中大槐树',
            '道德街', '西市场', '五里沟', '营市街', '青年公园', '南辛庄', '段店北路', '张庄路', '匡山', '美里湖', '吴家堡', '腊山', '兴福', '玉清湖', '无影山',
            '天桥东街',
            '北村', '南村', '堤口路', '北坦', '制锦市', '宝华', '官扎营', '纬北路', '药山', '北园', '泺口', '桑梓店', '大桥', '山大路', '洪家楼', '东风', '全福',
            '孙村', '巨野河', '华山', '荷花路', '王舍人', '鲍山', '郭店', '唐冶', '港沟', '遥墙', '临港', '仲宫', '柳埠', '董家', '彩石', '文昌', '崮云湖',
            '平安',
            '五峰山', '归德', '万德', '张夏', '明水', '双山', '圣井', '埠村', '枣园', '龙山', '普集', '官庄', '相公庄', '绣惠', '文祖', '曹范', '白云湖',
            '高官寨',
            '宁家埠', '济阳', '济北', '回河', '孙耿', '崔寨', '太平', '榆山', '锦水'
        ])
        areas_name = random.choice([
            '万豪国际公寓', '晓月苑', '永定路商住中心', '橙色年代', '嘉慧苑', '致雅居', '彩虹城', '松园小区', '燕归园', '北京青年城', '金宝纯别墅', '翌景嘉园', '涧桥·泊屋馆',
            '京东丽景', '旭风苑公寓', '朝阳无限', '庄胜二期', '潇雅居', 'GOGO新世代', '飞腾家园', '英嘉公寓', '高第', '金榜园', '迎曦园', '风格与林',
            '太阳国际公馆(瑞景嘉园)',
            '永合馨苑', '澳洲新星', '丰润世家', '洋桥花园', '长安新城', '金隅丽港城', '兴涛社区', '糖人街', '时代芳群', '运河园', '浉城百郦', '测试项目', '新洲商务大厦',
            '加来小镇',
            '新新公寓', '颍泽洲', '城市印象', '上河美墅', '同泰苑', '和枫雅居', '建兴家园', '昊腾花园', '高苑·花样年华', '金码大厦', '天辉公寓', 'NOLITA那里', '政馨家园',
            '文林商苑', '蝶翠华庭', '晋元庄小区', '幸福源', '当代城市家园', '非常生活', '祥瑞苑', '雪梨澳乡', '清欣园', '晟丰阁', '倚林佳园', '华龙小区', '秀安园',
            '新华联锦园',
            '乐澜宝邸', '棉花城', 'CLASS', '金宸公寓', '燕景佳园', '珠江帝景', '龙山新新小镇', '万景公寓', '飘HOME', '蓝堡', '新纪元公寓', '中信红树湾', '海德堡花园',
            '天缘公寓', '长城盛世', '鲁艺上河村', '瑞馨公寓', '鼎诚国际MM', '德胜世嘉', '榆园新居', '远洋天地', '星河城', '黎明新座', '世纪城', '大观园中华商住区',
            '中国第一商城',
            '后现代城', '中海凯旋', '新都丽苑', '陶然北岸', '观河锦苑', '星光公寓', '观筑', '绿城星洲花园', '御鹿家园', '都市心海岸', '山水汇豪', '漪内轩', '颐园(碧水云天)',
            '新荣家园', '双桥温泉北里住宅', '恬心家园', '正邦嘉园', '依翠园', '万科西山庭院', '新御景', '天行建商务大厦', '浉城百丽', '华腾园', '同仁园', '格林小镇',
            '东华经典(东华金座)', '俊景苑', '朗琴园', '快乐洋城', '新中环公寓', '非常宿舍', '清城名苑', '兴都苑(水榭楼台)', '雍景台', '风林绿洲(奕翠庭)', '团结公寓'
        ])
        building_name = str(random.randint(1, 50))
        unit_num = str(random.randint(1, 9))
        floor_num = str(random.randint(1, 30))
        room_num = str(random.randint(1, 4))
        return three_level_addr + street_address + '街道' + areas_name + building_name + '楼' + unit_num + '单元' + floor_num + '层' + room_num + '号'


    def random_city(self):
        '''# 随机市'''
        city_code = ['130100', '130200', '130300', '130400', '130500', '130600', '130700', '130800', '130900', '131000', '131100', '140100', '140200', '140300', '140400', '140500', '140600', '140700', '140800', '140900', '141000', '141100', '150100', '150200', '150300', '150400', '150500', '150600', '150700', '150800', '150900', '152200', '152500', '152900', '210100', '210200', '210300', '210400', '210500', '210600', '210700', '210800', '210900', '211000', '211100', '211200', '211300', '211400', '220100', '220200', '220300', '220400', '220500', '220600', '220700', '220800', '222400', '230100', '230200', '230300', '230400', '230500', '230600', '230700', '230800', '230900', '231000', '231100', '231200', '232700', '320100', '320200', '320300', '320400', '320500', '320600', '320700', '320800', '320900', '321000', '321100', '321200', '321300', '330100', '330200', '330300', '330400', '330500', '330600', '330700', '330800', '330900', '331000', '331100', '340100', '340200', '340300', '340400', '340500', '340600', '340700', '340800', '341000', '341100', '341200', '341300', '341400', '341500', '341600', '341700', '341800', '350100', '350200', '350300', '350400', '350500', '350600', '350700', '350800', '350900', '360100', '360200', '360300', '360400', '360500', '360600', '360700', '360800', '360900', '361000', '361100', '370100', '370200', '370300', '370400', '370500', '370600', '370700', '370800', '370900', '371000', '371100', '371200', '371300', '371400', '371500', '371600', '371700', '410100', '410200', '410300', '410400', '410500', '410600', '410700', '410800', '410900', '411000', '411100', '411200', '411300', '411400', '411500', '411600', '411700', '420100', '420200', '420300', '420500', '420600', '420700', '420800', '420900', '421000', '421100', '421200', '421300', '422800', '429000', '430100', '430200', '430300', '430400', '430500', '430600', '430700', '430800', '430900', '431000', '431100', '431200', '431300', '433100', '440100', '440200', '440300', '440400', '440500', '440600', '440700', '440800', '440900', '441200', '441300', '441400', '441500', '441600', '441700', '441800', '441900', '442000', '445100', '445200', '445300', '450100', '450200', '450300', '450400', '450500', '450600', '450700', '450800', '450900', '451000', '451100', '451200', '451300', '451400', '460100', '460200', '469000', '500300', '510100', '510300', '510400', '510500', '510600', '510700', '510800', '510900', '511000', '511100', '511300', '511400', '511500', '511600', '511700', '511800', '511900', '512000', '513200', '513300', '513400', '520100', '520200', '520300', '520400', '522200', '522300', '522400', '522600', '522700', '530100', '530300', '530400', '530500', '530600', '530700', '530800', '530900', '532300', '532500', '532600', '532800', '532900', '533100', '533300', '533400', '540100', '542100', '542200', '542300', '542400', '542500', '542600', '610100', '610200', '610300', '610400', '610500', '610600', '610700', '610800', '610900', '611000', '620100', '620200', '620300', '620400', '620500', '620600', '620700', '620800', '620900', '621000', '621100', '621200', '622900', '623000', '630100', '632100', '632200', '632300', '632500', '632600', '632700', '632800', '640100', '640200', '640300', '640400', '640500', '650100', '650200', '652100', '652200', '652300', '652700', '652800', '652900', '653000', '653100', '653200', '654000', '654200', '654300', '659000', '442000', '441900', '533100']
        return random.choice(city_code)

    def chiose_provance(self, city):
        pro = ['350000', '710000', '370000', '460000', '610000', '540000', '620000', '210000', '450000', '420000', '120000', '150000', '110000', '440000', '340000', '320000', '230000', '330000', '810000', '530000', '140000', '640000', '650000', '510000', '520000', '430000', '310000', '630000', '820000', '360000', '130000', '220000', '410000', '500000', '999999']
        pro_code = city[:2] + '0000'
        if pro_code in pro:
            return pro_code
        else:
            return '999999'

    def cust_tyep(self):
        '''客户类别'''
        return random.choice([
            '1',  # FI
            '2'  # CGI
        ])

    def org_type(self):
        '''组织机构类别'''
        code = random.choice([
            '1',  # corporation
            '2',  # credit union
            '3',  # government
            '4',  # limited liability company
            '5',  # not for profit
            '6',  # partnership
            '7',  # private label liability company
            '8',  # public authorities
            '9',  # publist list company
            '10',  # sole proprietorships
            '11'  # other
        ])
        return code

    def org_type2(self):
        '''组织机构类别'''
        code = random.choice([
            "001",  # 个人独资企业
            "002",  # 合伙企业
            "003",  # 公司制企业
            "004"  # 国有企业
        ])
        return code

    def busi_line(self):
        """机构业务类型"""
        bl = random.choice([
            "01",  # 发卡
            "02",  # ATM收单
            "03",  # 手工取现
            "04"  # 商户收单
        ])
        return bl

    def random_code(self):
        '''多个共用，具体含义见字段注释'''
        return random.choice(['1','2'])

    def random_chenghu(self):
        '''称呼'''
        return random.choice(['Mr', 'Ms'])

    def cust_status(self):
        '''
        随机生成客户状态，n正常，c关闭，n:c=9:1
        :return:
        '''
        status = random.choice(['n'  if i != 9 else 'c' for i in range(10)])
        return status

    # 客户真实有效性数据
    def make_reals_data(self):
        '''
        正常为空，不正常：
        1:留存的联系地址与注册地址不一致
        2:留存联系地址不存在或者虚构
        3:留存的电话号码属于无效、空号、已停机或无法接通
        4:证件非本人、证件伪造、变造证件
        5:拒绝配合尽职调查工作
        正常数据与不正常数据比例为1:10
        :return:
        '''
        return random.choice(['' if num >= 1 else str(random.randint(1, 5)) for num in range(10)])

    # 股权复杂度数据
    def make_complex_data(self):
        complex = random.choice([
            '1',  # 股权 3层以下
            '2',  # 股权 3层及以上，有商业目的
            '3'  # 股权 3层以上；或3个及以上注册地；涉及信托/不受监管的投资基金/代名人股东等；及没有明显商业目的
        ])
        return complex

    # 非自然人股权可辨识度数据
    def make_clear_data(self):
        clear = random.choice([
            '1',  # 全民集体所有制企业等结构清晰的企业
            '2',  # 公司制企业等结构相对清晰的企业
            '3',  # 公司制外资企业等结构较难识辨的企业
            '4',  # 个人独资企业、家族企业、合伙等难以尽调的企业
            '5'  # 其他风险较高股权或控制权结构（信托、代名股东等
        ])
        return clear

    def make_rule_type(self):
        '''预警类型'''
        return random.choice([
            '00',  # 大额
            '01'  # 可疑
        ])

    def make_warn_kd(self):
        '''预警方式'''
        return random.choice([
            '0',  # 人工手动
            '1'  # 系统自动
        ])

    def make_ctif_tp(self):
        '''可疑主体类别'''
        return random.choice([
            '1',  # 持卡人
            '2'  # 商户
        ])

    def make_tran_kd(self):
        '''txn表的交易种类, 差错交易占1%，
        '00',  # 差错交易
        '01'  # 普通交易
            '''
        return random.choice(['00' if n%60 == 0 else '01' for n in range(100)])


    def make_STCT_data(self):
        '''
        主体使用的银行卡类型
        :return:
        '''
        return random.choice([
            '01',  # 境内借记卡；
            '02',  # 境内信用卡；
            '03',  # 境内预付费卡；
            '09',  # 其他境内卡（若选择此项，报告机构应对其境内卡类型做进一步说明）；
            '11',  # 境外借记卡；
            '12',  # 境外信用卡；
            '13',  # 境外预付费卡；
            '19',  # 其他境外卡（若选择此项，报告机构应对其境外卡类型做进一步说明）；
            '99'  # 其他（若选择此项，报告机构应对其银行发行卡类型做进一步说明）
        ])

    def make_tstp_data(self):
        '''
        交易方式
        :return:
        '''
        return random.choice([
            '11',  # ATM现金交易业务；
            '12',  # 银行柜面现金交易；
            '19',  # 其他方式现金交易；（若选择此项，报告机构应对其现金交易方式做进一步说明）
            '21',  # ATM转账业务；
            '22',  # 银行柜面转账业务；
            '23',  # 网银转账业务；
            '29',  # 其他方式转账业务；（若选择此项，报告机构应对其转账方式做进一步说明）
            '30',  # P0S消费；
            '40',  # 网络收单交易；
            '99'  # 其他方式（若选择此项，报告机构应对其交易方式做进一步说明）
        ])

    def make_time(self,sign=6):
        '''生成随机时间，时分秒 HH:mm:ss'''
        hour = random.randint(0,23)
        minite = random.randint(0,59)
        second = random.randint(0,59)
        if hour == 0:
            hour = '00'
        elif hour <10:
            hour = '0' + str(hour)

        if minite == 0:
            minite = '00'
        elif minite < 10:
            minite = '0' + str(minite)

        if second == 0:
            second = '00'
        elif second < 10:
            second = '0' + str(second)
        if sign==8:
            return '{}:{}:{}'.format(hour, minite, second)
        else:
            return '{}{}{}'.format(hour, minite, second)

    def make_tsdr_data(self):
        '''
        相同码值共用
        资金收付标识tsdr,境内外标识CBIF，卡类型card_media，
        :return:
        '''

        return random.choice([
            '01',  # :收
            '02'  # : 付
        ])

    def process_time(self, tt):
        '''
        处理自增日期函数，传入日期，根据月份，限制天数
        :param tt:
        :return: str  YYYYmmdd
        '''
        t = str(tt)
        year = int(t[:4])
        month = int(t[4:6])
        day = int(t[6:])
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day > 31:
                day = day % 31
                month += 1

        elif month in [4, 6, 9, 11]:
            if day > 30:
                day = day % 30
                month += 1
        else:
            if year % 4 == 0:
                if day > 29:
                    day = day % 29
                    month += 1
            else:
                if day > 28:
                    day = day % 28
                    month += 1
        if month < 10:
            month = '0' + str(month)
        if day < 10:
            day = '0' + str(day)

        pt = str(year) + str(month) + str(day)
        return pt

    def make_tctp_data(self):
        '''交易币种'''
        return random.choice([
            'AFA',  # 阿富汗尼
            'ALL',  # 列克
            'DZD',  # 阿尔及利亚第纳尔
            'ADP',  # 安道尔比塞塔
            'AZM',  # 阿塞拜疆马纳特
            'ARS',  # 阿根廷比索
            'AUD',  # 澳大利亚元
            'ATS',  # 先令
            'BSD',  # 巴哈马元
            'BHD',  # 巴林第纳尔
            'BDT',  # 塔卡
            'AMD',  # 亚美尼亚达姆
            'BBD',  # 巴巴多斯元
            'BEF',  # 比利时法郎
            'BMD',  # 百慕大元
            'BTN',  # 努尔特鲁姆
            'BOB',  # 玻利瓦诺
            'BWP',  # 普拉
            'BZD',  # 伯利兹元
            'SBD',  # 所罗门群岛元
            'BND',  # 文莱元
            'BGL',  # 列弗
            'MMK',  # 缅元
            'BIF',  # 布隆迪法郎
            'KHR',  # 瑞尔
            'CAD',  # 加元
            'CVE',  # 佛得角埃斯库多
            'KYD',  # 开曼群岛元
            'LKR',  # 斯里兰卡卢比
            'CLP',  # 智利比索
            'CNY',  # 人民币元
            'COP',  # 哥伦比亚比索
            'KMF',  # 科摩罗法郎
            'CRC',  # 哥斯达黎加科郎
            'HRK',  # 克罗地亚库纳
            'CUP',  # 古巴比索
            'CYP',  # 塞浦路斯镑
            'CZK',  # 捷克克朗
            'DKK',  # 丹麦克朗
            'DOP',  # 多米尼加比索
            'SVC',  # 萨尔瓦多科郎
            'ETB',  # 埃塞俄比亚比尔
            'ERN',  # 纳克法
            'EEK',  # 克罗姆
            'FKP',  # 福克兰群岛镑
            'FJD',  # 斐济元
            'FIM',  # 马克
            'FRF',  # 法国法郎
            'DJF',  # 吉布提法郎
            'GMD',  # 达拉西
            'DEM',  # 德国马克
            'GHC',  # 塞地
            'GIP',  # 直布罗陀镑
            'GRD',  # 德拉克马
            'GTQ',  # 格查尔
            'GNF',  # 几内亚法郎
            'GYD',  # 圭亚那元
            'HTG',  # 古德
            'HNL',  # 伦皮拉
            'HKD',  # 香港元
            'HUF',  # 福林
            'ISK',  # 冰岛克朗
            'INR',  # 印度卢比
            'IDR',  # 卢比
            'IRR',  # 伊朗里亚尔
            'IQD',  # 伊拉克第纳尔
            'IEP',  # 爱尔兰镑
            'ILS',  # 新谢客尔
            'ITL',  # 意大利里拉
            'JMD',  # 牙买加元
            'JPY',  # 日元
            'KZT',  # 坚戈
            'JOD',  # 约旦第纳尔
            'KES',  # 肯尼亚先令
            'KPW',  # 北朝鲜圆
            'KRW',  # 圆
            'KWD',  # 科威特第纳尔
            'KGS',  # 索姆
            'LAK',  # 基普
            'LBP',  # 黎巴嫩镑
            'LSL',  # 罗提
            'LVL',  # 拉脱维亚拉特
            'LRD',  # 利比里亚元
            'LYD',  # 利比亚第纳尔
            'LTL',  # 立陶宛
            'LUF',  # 卢森堡法郎
            'MOP',  # 澳门元
            'MGF',  # 马尔加什法郎
            'MWK',  # 克瓦查
            'MYR',  # 马来西亚林吉特
            'MVR',  # 卢菲亚
            'MTL',  # 马尔他里拉
            'MRO',  # 乌吉亚
            'MUR',  # 毛里求斯卢比
            'MXN',  # 墨西哥比索
            'MNT',  # 图格里克
            'MDL',  # 摩尔瓦多列伊
            'MAD',  # 摩洛哥迪拉姆
            'MZM',  # 麦梯卡尔
            'OMR',  # 阿曼里亚尔
            'NAD',  # 纳米比亚元
            'NPR',  # 尼泊尔卢比
            'NLG',  # 荷兰盾
            'ANG',  # 荷属安的列斯盾
            'AWG',  # 阿鲁巴盾
            'VUV',  # 瓦图
            'NZD',  # 新西兰元
            'NIO',  # 金科多巴
            'NGN',  # 奈拉
            'NOK',  # 挪威克朗
            'PKR',  # 巴基斯坦卢比
            'PAB',  # 巴波亚
            'PGK',  # 基那
            'PYG',  # 瓜拉尼
            'PEN',  # 索尔
            'PHP',  # 非律宾比索
            'PTE',  # 葡萄牙埃斯库多
            'GWP',  # 几内亚比绍比索
            'TPE',  # 东帝汶埃斯库多
            'QAR',  # 卡塔尔里亚尔
            'ROL',  # 列伊
            'RUB',  # 俄罗斯卢布
            'RWF',  # 卢旺达法郎
            'SHP',  # 圣赫勒拿磅
            'STD',  # 多布拉
            'SAR',  # 沙特里亚尔
            'SCR',  # 塞舌尔卢比
            'SLL',  # 利昂
            'SGD',  # 新加坡元
            'SKK',  # 斯洛伐克克朗
            'VND',  # 盾
            'SIT',  # 托拉尔
            'SOS',  # 索马里先令
            'ZAR',  # 兰特
            'ZWD',  # 津巴布韦元
            'ESP',  # 西班牙比塞塔
            'SDD',  # 苏丹第纳尔
            'SRG',  # 苏里南盾
            'SZL',  # 里兰吉尼
            'SEK',  # 瑞典克朗
            'CHF',  # 瑞士法郎
            'SYP',  # 叙利亚镑
            'THB',  # 铢
            'TOP',  # 邦加
            'TTD',  # 特立尼达和多巴哥元
            'AED',  # UAE迪拉姆
            'TND',  # 突尼斯第纳尔
            'TRL',  # 土耳其里拉
            'TMM',  # 马纳特
            'UGX',  # 乌干达先令
            'MKD',  # 第纳尔
            'RUR',  # 俄罗斯卢布
            'EGP',  # 埃及镑
            'GBP',  # 英镑
            'TZS',  # 坦桑尼亚先令
            'USD',  # 美元
            'UYU',  # 乌拉圭比索
            'UZS',  # 乌兹别克斯坦苏姆
            'WST',  # 塔拉
            'YER',  # 也门里亚尔
            'YUM',  # 南斯拉夫第纳尔
            'ZMK',  # 克瓦查
            'TWD',  # 新台湾元
            'XAF',  # CFA法郎BEAC
            'XCD',  # 东加勒比元
            'XOF',  # CFA法郎BCEAO
            'XPF',  # CFP法郎
            'XBA',  # 欧洲货币合成单位
            'XBB',  # 欧洲货币单位(E.M.U.-6)
            'XBC',  # 欧洲账户9单位
            'XBD',  # 欧洲账户17单位
            'XAU',  # 黄金
            'XDR',  # 特别提款权
            'XAG',  # 银
            'XPT',  # 铂白金
            'XTS',  # 测试特别保留
            'XPD',  # 钯
            'TJS',  # 索莫尼
            'AOA',  # 宽扎
            'BYR',  # 白俄罗斯卢布
            'BGN',  # 保加利亚列弗
            'CDF',  # 刚果法郎
            'BAM',  # 可自由兑换标记
            'EUR',  # 欧元
            'MXV',  # 墨西哥发展单位
            'UAH',  # 格里夫纳
            'GEL',  # 拉里
            'BOV',  # Mvdol(玻利维亚)
            'PLN',  # 兹罗提
            'BRL',  # 巴西瑞尔
            'CLF',  # 发展单位
            'USN',  # (次日)
            'USS',  # (同日)
            'XXX',  # 未包括的交易货币
            'XFU',  # UIC法郎
            'XFO'  # 黄金法郎
        ])

    def make_tcat_data(self):
        '''交易金额'''
        temp = fake.pyfloat(positive=True)
        return round(temp, 3)+10000

    def make_ticd_data(self):
        '''
        交易流水的唯一识别码，时间戳加地区代码加5位随机数字
        :return:
        '''
        timestmp = time.time()
        ticd = str(timestmp).replace('.', '') + self.random_num(1)
        return ticd

    def make_uuid_data(self, sign):
        """
        a．联机交易规则：前5位#####，后3位是系统的IE id(可以随便写)，中间24位随机  i.e. ######001605577043000000005D034P
        b．手工交易规则：前4位MTRN，后12位随机  i.e. MTRN000000004831
        c．差错交易：18位随机数字  i.e. 393779701086822400
        1：联机交易，2：手工交易，3：差错交易
        :return:
        """
        if sign == "01" or sign == "1":
            uuid = "#####" + self.random_num(24) + self.random_str(3)
        elif sign == 2:
            uuid = "MTRN" + self.random_num(12)
        else:
            timestmp = time.time()
            uuid = str(timestmp).replace('.', '') + self.random_num(1)
        return uuid

    def make_busi_type(self):
        return random.choice([
            '01',  # 万事达卡
            '02',  # 万事顺卡
            '03'  # 顺利卡
        ])

    def make_trans_type(self):
        return random.choice([
            '00',  # 初始
            '01',  # 成功
            '02',  # 失败
            '03',  # 超时
            '04',  # 缺陷成功
            '05'  # 未知失败
        ])

    def make_tran_advice_st(self):
        return random.choice([
            '00',  # 初始
            '01',  # 预授权完成撤销
            '11',  # 拒绝通知
            '13',  # 已通知
            '15',  # 预授权完成
            '81',  # 部分撤销
            '83',  # 已撤销
            '85',  # 部分冲正
            '89'  # 已冲正
        ])

    def make_yes_no(self):
        '''
        通用，返回1是，0否
        :return:
        '''
        return random.choice(['1' if n %4 == 0 else '0' for n in range(10)])


    def make_yes_no_unused(self):
        '''
        通用，返回1是，0否
        :return:
        '''
        temp = ['1' if n %4 == 0 else '0' for n in range(10)]
        temp.extend(['2', '2'])
        return random.choice(temp)

    def make_mingdan_type(self):
        '''名单种类'''
        return random.choice([
            '1',  # 政要名单
            '2',  #  联合国制裁名单
            '3'  # 其他
        ])

    def make_TRCD_data(self):
        '''交易发生地'''
        local = 'CHN{}'.format(random.choice([130100, 130200, 130300, 130400, 130500, 130600, 130700, 130800, 130900, 131000, 131100, 140100, 140200, 140300, 140400, 140500, 140600, 140700, 140800, 140900, 141000, 141100, 150100, 150200, 150300, 150400, 150500, 150600]))
        return local

    def make_channel_type(self, mcc):
        '''交易渠道,根据mcc映射
            '01',  # POS
            '02',  # ATM
            '03'  # Teller'''
        if mcc == "6010":
            return "01"
        elif mcc == "6011":
            return "02"
        else:
            return "03"



    def make_digsit(self, code):
        '''
        假设token_pan是正常卡号，取前六位后四位，中间用6位*代替
        :return:
        '''
        code = str(code)
        return code[:6] + '*'*6 + code[-4:]


    def make_crdhldr_acc_tp_from(self):
        '''
        持卡人出方账户类型 ,
        :return:
        '''
        return random.choice([
            "00",  # No account specified (NAS)/Default Account
            "10",  # Savings Account
            "20",  # Checking Account
            "30",  # Credit Card Account
            "40"  # Universal Account
        ])

    def make_crdhldr_acc_tp_to(self):
        '''
        持卡人入方账户类型,
        :return:
        '''
        return random.choice([
            "00",  # No account specified (NAS)/Default Account
            "10",  # Savings Account
            "20",  # Checking Account
            "30",  # Credit Card Account
            "40"  # Universal Account
        ])

    def make_trade_time19(self, date=None):
        '''19位时间 YYYY-MM-DD HH:mm:ss'''
        if not date:
            date = '{}-{}-{}'.format(self.year, self.month, self.day)
            temp = '{} {}'.format(date, self.make_time())
        else:
            temp = '{} {}'.format(date, self.make_time())
        return temp

    def turn_date10(self, date):
        '''
        传入8位日期，返回10位日期
        :param date:
        :return:
        '''
        temp = '{}-{}-{}'.format(date[:4], date[4:6], date[6:])
        return temp

    # 有效期数据
    def make_enable_date(self):
        '''
        有效期,日期范围，本年本月本日起至前推20年之间，格式 YYYY-MM-DD
        :return:
        '''
        year_now = int(self.year)
        num = random.randint(-2, 20)
        year = year_now + num
        month_now = int(self.month)
        if year == year_now:
            month = random.randint(1, month_now)
        else:
            month = random.randint(1, 12)
        if month < 10:
            month = '0' + str(month)
        else:
            month = str(month)
        day_now = int(self.day)
        if month == '02':
            if year == year_now and int(month) == month_now:
                day = str(random.randint(1, day_now))
            else:
                day = str(random.randint(1, 28))
        else:
            if year == year_now and int(month) == month_now:
                day = str(random.randint(1, day_now))
            else:
                day = str(random.randint(1, 30))
        if eval(day) < 10:
            day = '0' + day

        return '-'.join([str(year), month, day])

    def make_iss_mti_cd(self):
        '''
        随机，缺码表
        :return:
        '''
        return random.choice([
            '0',
            '1'
        ])

    def make_iss_pcode(self):
        '''
        随机，缺码表
        :return:
        '''
        return random.choice([
            '0',
            '1'
        ])

    def make_tran_init(self):
        '''交易发起方'''
        return random.choice([
            '0',  # 联机平台
            '1',  # 成员行发起
            '2'  # 手工平台发起
        ])

    def make_tran_res(self):
        '''收单应答标识'''
        return random.choice([
            '0',  # 联机应答
            '1',  # 成员行应答
        ])

    def make_card_type(self):
        '''卡类型'''
        return random.choice([
            "00",  # 仅收单
            "01",  # 商务信用卡
            "02",  # 商务借记卡
            "03",  # 个人信用卡
            "04",  # 个人借记卡
            "05",  # 中国令牌范围
            "06"  # 公务卡
        ])

    def make_inter_tran_type(self):
        '''联机系统内部交易类型
        设置96%为消费，
        '''
        random_num = random.randint(0,101)
        if random_num % 20 == 0:
            return '21000003',  # 取现
        elif random_num % 30 == 0:
            return random.choice([
                '11000001',  # 预授权
                '21000004',  # 转账
                '21000005',  # 存款
                '21000006',  # 退货（联机）
                '21000007',  # 代收
                '21000008',  # 代付
                '21010010',  # 转账转出
                '21010011',  # 转账转入
                '31000001',  # 账户验证
                '31000002',  # 余额查询
                '22000001'  # 预授权完成
            ])
        else:
            return '21000002',  # 消费


    def make_hold_amt(self):
        '''
        关系人持股金额,保留2位小数
        :return:
        '''
        temp = fake.pyfloat(positive=True)
        temp = round(temp, 2)
        return temp

    def make_card_product_data(self):
        """
        卡产品
        :return:
        """
        return random.choice([
            "MCG",  # 金卡
            "MCS",  # 普卡
            "MPL",  # 白金卡
            "MCT",  # 钛金卡
            "MCW",  # 世界卡
            "MWR",  # 世界睿我卡
            "MWE",  # 世界之级卡
            "MCB",  # 商务金卡
            "MEB",  # 商务白金卡
            "MWB",  # 商务世界卡
            "MAB",  # 商务世界之极卡
            "MCO",  # 公务金卡
            "MEO",  # 公务白金卡
            "MCP",  # 公司采购卡
            "MBS",  # 对公业务卡
            "MDS",  # 普卡
            "MDG",  # 金卡
            "MDP",  # 白金卡
            "MDH",  # 世界卡
            "MDW",  # 世界之极
            "MDT"  # 商务借记卡
        ])


    def make_crdhldr_tran_type_data(self):
        """
        持卡人交易类型
        :return:
        """
        return random.choice([
            "00",  # Purchase
            "01",  # Withdrawal
            "10",  # Non Cash Funding, debit of an account for a transfer of funds to a different entity
            "20",  # Refund
            "21",  # Deposit
            "28",  # Payment Transaction
            "29",  # Original Credit Transaction
            "30",  # Balance Inquiry
            "39",  # Reserved for Future Use
            "40"  # Account Transfer
        ])

    def make_pos_entry_cd_data(self):
        """
        POS机输入方式码
        PAN,PIN 两种混合到一起，2位为pan，一位为pin
        消费刷卡类型
        :return:
        """
        random_num = random.randint(0,101)
        if random_num % 5 == 0:
            return '10'  # 绑卡
        elif random_num % 6 == 0:
            return '05'  # 芯片
        elif random_num % 7 == 0:
            return '07'  # 非接
        elif random_num % 9 == 0:
            return '90'  # 磁条
        elif random_num % 11 == 0:
            return '01'  # 手输卡号
        elif random_num % 8 == 0:
            return random.choice([
                "00",
                "02",
                "03",
                "04",
                "09",
                "79",
                "80",
                "82",
                "91",
                "0",
                "1",
                "2",
                "3",
                "8"
            ])
        else:
            return '81'  # 线上


    def make_resp_cd_data(self):
        """
        应答码
        :return:
        """
        res = [
            "00",  # Approved or completed successfully
            "01",  # Refer to cardissuer Valid fore-commerce only
            "03",  # Invalid merchant
            "04",  # Capture card
            "05",  # Do not honor
            "08",  # Honor with ID
            "12",  # Invalid transaction
            "13",  # Invalid amount
            "14",  # Invalid card
            "15",  # Invalid issuer
            "26",  # Record not in active status.Processor not in active status.
            "30",  # Message format error
            "41",  # Lost card
            "43",  # Stolen card
            "51",  # Insufficient
            "54",  # Expired card
            "55",  # Invalid PIN
            "57",  # Transaction not permitted to issuer or  cardholder
            "58",  # Transaction not permitted to acquirer or terminal
            "61",  # Exceeds withdrawal limit
            "62",  # Restricted card
            "63",  # Error in decryption of PIN block Security violation
            "65",  # Exceeds withdrawal count limits
            "70",  # Invalid transaction;contact card issuer
            "71",  # PIN not changed
            "75",  # Allowable number of PIN tries exceeded
            "76",  # Invalid “To” account specified
            "77",  # Invalid “From” account specified
            "78",  # Invalid account specified. For Mastercard China Switch use only
            "79",  # Key Exchange Validation failed
            "80",  # System not available Duplicate add; action not performed.
            "81",  # Domestic Debit Transaction Not Allowed
            "84",  # Invalid Authorization Life Cycle
            "85",  # No reason to decline
            "86",  # PIN Validation not possible
            "88",  # Cryptographic failure
            "89",  # PIN unacceptable.Retry.
            "91",
            # Issuer or Switch system inoperative Format Error— Issuer processor returns invalid data in the response message/0110/0210.
            "92",  # Unable to route transaction
            "94",  # Duplicate transmission detected
            "96",  # System error or system malfunction
            "A0",  # MAC verification fails
            "A2",  # Defective approval-with matched original transcation
            "A4",  # Defective approvalwithout matched original transcation
        ]
        return random.choice(res)


    def make_dspt_tran_type_data(self):
        """
        差错交易类型
        :return:
        """
        return random.choice([
            "95001001",  # Dispute Chargeback Transaction
            "95001002",  # Dispute Debit Adjustment Transaction
            "95001003",  # Dispute Credit Adjustment Transaction
            "95001004",  # Dispute Re-Presentment Transaction
            "95001005",  # Dispute Chargeback Reversal
            "95001006",  # Dispute Debit Adjustment Reversal
            "95001007",  # Dispute Credit Adjustment Reversal
            "95001008",  # Dispute Re-Presentment Reversal
            "95002001",  # Pre-arbitration Settlement
            "95002002",  # Arbitration Settlement
            "95002003",  # Pre-compliance Settlement
            "95002004",  # Compliance Settlement
            "95002005",  # Pre-arbitration Settlement Reversal
            "95002006",  # Arbitration Settlement Reversal
            "95002007",  # Pre-compliance Settlement Reversal
            "95002008"  # Compliance Settlement Reversal
        ])

    def make_group_tran_type_data(self):
        """
        交易类型分组
        :return:
        """
        res = [
            "22000001",  # Pre-authorization completion
            "21000002",  # Purchase
            "21000003",  # Cash withdrawal
            "21010010",  # Fund Transfer-out
            "21010011",  # Fund Transfer-in
            "21000005",  # Deposit
            "21000006",  # Refund
            "21000007",  # Recurring
            "21000008",  # Payment
            "22011001",  # Manual pre-authorization completion
            "21011006"  # Manual Refund
        ]
        return random.choice(res)

    def make_mcc_data(self):
        """mcc商户类型，851种"""
        res = random.choice(["0742", "0763", "0780", "1520", "1711", "1731", "1740", "1750", "1761", "1771", "1799", "2741", "2791", "2842", "3000", "3001", "3002", "3003", "3004", "3005", "3006", "3007", "3008", "3009", "3010", "3011", "3012", "3013", "3014", "3015", "3016", "3017", "3018", "3020", "3021", "3022", "3023", "3024", "3025", "3026", "3027", "3028", "3029", "3030", "3031", "3032", "3033", "3034", "3035", "3036", "3037", "3038", "3039", "3040", "3041", "3042", "3043", "3044", "3045", "3046", "3047", "3048", "3049", "3050", "3051", "3052", "3053", "3054", "3055", "3056", "3057", "3058", "3059", "3060", "3061", "3062", "3063", "3064", "3065", "3066", "3067", "3068", "3071", "3072", "3075", "3076", "3077", "3078", "3079", "3082", "3083", "3084", "3085", "3087", "3088", "3089", "3090", "3094", "3096", "3097", "3098", "3099", "3100", "3102", "3103", "3106", "3111", "3112", "3117", "3125", "3127", "3129", "3130", "3131", "3132", "3136", "3144", "3146", "3148", "3151", "3156", "3159", "3161", "3164", "3167", "3171", "3172", "3174", "3175", "3177", "3178", "3180", "3181", "3182", "3183", "3184", "3185", "3186", "3187", "3188", "3190", "3191", "3193", "3196", "3197", "3200", "3204", "3206", "3211", "3212", "3213", "3217", "3219", "3220", "3221", "3222", "3223", "3226", "3228", "3229", "3231", "3234", "3236", "3239", "3240", "3241", "3242", "3243", "3245", "3246", "3247", "3248", "3252", "3253", "3256", "3260", "3261", "3263", "3266", "3267", "3280", "3282", "3285", "3286", "3287", "3292", "3293", "3294", "3295", "3296", "3297", "3298", "3299", "3300", "3301", "3351", "3352", "3353", "3354", "3355", "3357", "3359", "3360", "3361", "3362", "3364", "3366", "3368", "3370", "3374", "3376", "3380", "3381", "3385", "3386", "3387", "3388", "3389", "3390", "3391", "3393", "3394", "3395", "3396", "3398", "3400", "3405", "3409", "3412", "3420", "3421", "3423", "3425", "3427", "3428", "3429", "3430", "3431", "3432", "3433", "3434", "3435", "3436", "3438", "3439", "3441", "3501", "3502", "3503", "3504", "3505", "3506", "3507", "3508", "3509", "3510", "3511", "3512", "3513", "3514", "3515", "3516", "3517", "3518", "3519", "3520", "3521", "3522", "3523", "3524", "3525", "3526", "3527", "3528", "3529", "3530", "3531", "3532", "3533", "3534", "3535", "3536", "3537", "3538", "3539", "3540", "3541", "3542", "3543", "3544", "3545", "3546", "3547", "3548", "3549", "3550", "3551", "3552", "3553", "3554", "3555", "3556", "3557", "3558", "3559", "3560", "3561", "3562", "3563", "3564", "3565", "3566", "3567", "3568", "3569", "3570", "3571", "3572", "3573", "3574", "3575", "3576", "3577", "3578", "3579", "3580", "3581", "3582", "3583", "3584", "3585", "3586", "3587", "3588", "3589", "3590", "3591", "3592", "3593", "3594", "3595", "3596", "3597", "3598", "3599", "3600", "3601", "3602", "3603", "3604", "3605", "3606", "3607", "3608", "3609", "3610", "3611", "3612", "3613", "3614", "3615", "3616", "3617", "3618", "3619", "3620", "3621", "3622", "3623", "3624", "3625", "3626", "3627", "3628", "3629", "3630", "3631", "3632", "3633", "3634", "3635", "3636", "3637", "3638", "3639", "3640", "3641", "3642", "3643", "3644", "3645", "3646", "3647", "3648", "3649", "3650", "3651", "3652", "3653", "3654", "3655", "3656", "3657", "3658", "3659", "3660", "3661", "3662", "3663", "3664", "3665", "3666", "3667", "3668", "3669", "3670", "3671", "3672", "3673", "3674", "3675", "3676", "3677", "3678", "3679", "3680", "3681", "3682", "3683", "3684", "3685", "3686", "3687", "3688", "3689", "3690", "3691", "3692", "3693", "3694", "3695", "3696", "3697", "3698", "3699", "3700", "3701", "3702", "3703", "3704", "3705", "3706", "3707", "3708", "3709", "3710", "3711", "3712", "3713", "3714", "3715", "3716", "3717", "3718", "3719", "3720", "3721", "3722", "3723", "3724", "3725", "3726", "3727", "3728", "3729", "3730", "3731", "3732", "3733", "3734", "3735", "3736", "3737", "3738", "3739", "3740", "3741", "3742", "3743", "3744", "3745", "3746", "3747", "3748", "3749", "3750", "3751", "3752", "3753", "3754", "3755", "3757", "3758", "3759", "3760", "3761", "3762", "3763", "3764", "3765", "3766", "3767", "3768", "3769", "3770", "3771", "3772", "3773", "3774", "3775", "3776", "3777", "3778", "3779", "3780", "3781", "3782", "3783", "3784", "3785", "3786", "3787", "3788", "3789", "3790", "3791", "3792", "3793", "3794", "3795", "3796", "3797", "3798", "3799", "3800", "3801", "3802", "3803", "3804", "3805", "3806", "3807", "3808", "3809", "3810", "3811", "3812", "3813", "3814", "3815", "3817", "3818", "3819", "3820", "3821", "3822", "3823", "3824", "3825", "3826", "3827", "3828", "3829", "3830", "3831", "4011", "4111", "4112", "4119", "4121", "4131", "4214", "4215", "4225", "4411", "4457", "4468", "4511", "4582", "4722", "4784", "4789", "4812", "4813", "4814", "4816", "4821", "4829", "4899", "4900", "5013", "5021", "5039", "5044", "5045", "5046", "5047", "5051", "5065", "5072", "5074", "5085", "5094", "5099", "5111", "5122", "5131", "5137", "5139", "5169", "5172", "5192", "5193", "5198", "5199", "5200", "5211", "5231", "5251", "5261", "5271", "5300", "5309", "5310", "5311", "5331", "5399", "5411", "5422", "5441", "5451", "5462", "5499", "5511", "5521", "5531", "5532", "5533", "5541", "5542", "5551", "5561", "5571", "5592", "5598", "5599", "5611", "5621", "5631", "5641", "5651", "5655", "5661", "5681", "5691", "5697", "5698", "5699", "5712", "5713", "5714", "5718", "5719", "5722", "5732", "5733", "5734", "5735", "5811", "5812", "5813", "5814", "5815", "5816", "5817", "5818", "5912", "5921", "5931", "5932", "5933", "5935", "5937", "5940", "5941", "5942", "5943", "5944", "5945", "5946", "5947", "5948", "5949", "5950", "5960", "5962", "5963", "5964", "5965", "5966", "5967", "5968", "5969", "5970", "5971", "5972", "5973", "5975", "5976", "5977", "5978", "5983", "5992", "5993", "5994", "5995", "5996", "5997", "5998", "5999", "6010", "6011", "6012", "6050", "6051", "6211", "6300", "6313", "6532", "6533", "6536", "6537", "6538", "6540", "7011", "7012", "7032", "7033", "7210", "7211", "7216", "7217", "7221", "7230", "7251", "7261", "7273", "7276", "7277", "7278", "7296", "7297", "7298", "7299", "7311", "7321", "7333", "7338", "7339", "7342", "7349", "7361", "7372", "7375", "7379", "7392", "7393", "7394", "7395", "7399", "7512", "7513", "7519", "7523", "7531", "7534", "7535", "7538", "7542", "7549", "7622", "7623", "7629", "7631", "7641", "7692", "7699", "7829", "7832", "7841", "7911", "7922", "7929", "7932", "7933", "7941", "7991", "7992", "7993", "7994", "7995", "7996", "7997", "7998", "7999", "8011", "8021", "8031", "8041", "8042", "8043", "8049", "8050", "8062", "8071", "8099", "8111", "8211", "8220", "8241", "8244", "8249", "8299", "8351", "8398", "8641", "8651", "8661", "8675", "8699", "8734", "8911", "8931", "8999", "9211", "9222", "9223", "9311", "9399", "9402", "9405"])
        return res

    def make_mcc_desc(self,mcc):
        """
        根据MCC，返回对应的名称
        :return:
        """
        mcc_dict = {
            "0742": "VETERINARY SERVICES",
            "0763": "AGRICULTURAL COOPERATIVES",
            "0780": "LANDSCAPING AND HORTICULTURAL SERVICES",
            "1520": "GENERAL CONTRACTORS/RESIDENTIAL AND COMMERCIAL BUILDINGS",
            "1711": "HEATING, PLUMBING, AIR CONDITIONING CONTRACTORS",
            "1731": "ELECTRICAL CONTRACTORS",
            "1740": "INSULATION,MASONRY,PLSTER,STONEWRK,TILESET CNTRCTR",
            "1750": "CARPENTRY CONTRACTORS",
            "1761": "ROOFING AND SIDING, SHEET METAL WORK CONTRACTORS",
            "1771": "CONCRETE WORK CONTRACTORS",
            "1799": "CONTRACTORS,SPECIAL TRADE-NOT ELSEWHERE CLASSIFIED",
            "2741": "MISCELLANEOUS PUBLISHING AND PRINTING",
            "2791": "TYPESETTING, PLATE MAKING & RELATED SERVICES",
            "2842": "SANITATION, POLISHING & SPECIALITY CLEANING PREP",
            "3000": "UNITED AIRLINES",
            "3001": "AMERICAN AIRLINES",
            "3002": "PAN AM",
            "3003": "EUROFLY",
            "3004": "DRAGONAIR",
            "3005": "BRITISH A",
            "3006": "JAPAN AIR LINES",
            "3007": "AIR FRANCE",
            "3008": "LUFTHANSA",
            "3009": "AIR CAN",
            "3010": "ROYAL DUTCH AIRLINES (KLM",
            "3011": "AEROFLOT",
            "3012": "QANTAS",
            "3013": "ALITALIA",
            "3014": "SAUDI ARABIAN AIRLINES",
            "3015": "SWISS  INTERNATIONAL AIR LINES",
            "3016": "SCANDINAVIAN AIRLINE SYSTEM (SAS",
            "3017": "SOUTH AFRICAN AIRWAYS",
            "3018": "VARIG (BRAZIL",
            "3020": "AIR INDIA",
            "3021": "AIR ALGERIE",
            "3022": "PAL AIR",
            "3023": "MEXICANA",
            "3024": "PAKISTAN INTERNATIONAL",
            "3025": "AIR NEW ZEALAND LIMITED INTERNATIONAL",
            "3026": "EMIRATES AIRLINES (ABBR. EMIRATES",
            "3027": "UNION DE TRANSPORTS AERIENS",
            "3028": "AIR MALTA",
            "3029": "SN BRUSSELS AIRLINES",
            "3030": "AEROLINEAS ARGENTINAS",
            "3031": "OLYMPIC AIRWAYS",
            "3032": "EL AL",
            "3033": "ANSETT AIRLINES",
            "3034": "ETIHAD AIRWAYS - ETIHADAIR",
            "3035": "TAP (PORTUGAL",
            "3036": "VASP (BRAZIL",
            "3037": "EGYPTAIR",
            "3038": "KUWAIT AIRWAYS",
            "3039": "AVIANCA",
            "3040": "GULF AIR (BAHRAIN",
            "3041": "BALKAN-BULGARIAN AIRLINES",
            "3042": "FINNAIR",
            "3043": "AER LINGUS",
            "3044": "AIR LANKA (ABBR. AIR LANKA",
            "3045": "NIGERIA AIRWAYS",
            "3046": "CRUZERIO DO SUL (BRAZIL",
            "3047": "THY (TURKEY",
            "3048": "ROYAL AIR MAROC",
            "3049": "TUNIS AIR",
            "3050": "ICELANDAIR",
            "3051": "AUSTRIAN AIRLINES",
            "3052": "LAN AIRLINES",
            "3053": "AVIACO (SPAIN",
            "3054": "LADECO (CHILE",
            "3055": "LAB (BOLIVIA",
            "3056": "JET AIRWAYS",
            "3057": "VIRGIN AMERICA",
            "3058": "DELTA",
            "3059": "DBA AIR LINES",
            "3060": "NORTHWEST AIRLINES",
            "3061": "CONTINENTAL",
            "3062": "HAPAG-LLOYD EXPRESS",
            "3063": "U.S. AIRWAYS (USAIRWYS",
            "3064": "ADRIA AIRWAYS (ABBR: ADRIA",
            "3065": "AIR INTER",
            "3066": "SOUTHWEST AIRLINES",
            "3067": "VANGUARD AIRLINES (ABBR: VANGUARD",
            "3068": "AIR ASTANA",
            "3071": "AIR BRITISH COLUMBIA",
            "3072": "CEBU PACIFIC - CEBU PAC",
            "3075": "SINGAPORE AIRLINES",
            "3076": "AEROMEXICO",
            "3077": "THAI AIRWAYS",
            "3078": "CHINA AIRLINES",
            "3079": "JETSTAR AIRWAYS - JETSTAR",
            "3082": "KOREAN AIRLINES",
            "3083": "AIR AFRIQ E",
            "3084": "EVA AIRWAYS (BR",
            "3085": "MIDWEST EXPRESS AIRLINES",
            "3087": "METRO AIRLINES",
            "3088": "CROATIA  AIR",
            "3089": "TRANSAERO (ABBR. TRANSAERO",
            "3090": "UNI AIRWAYS",
            "3094": "ZAMBIA AIRWAYS",
            "3096": "AIR ZIMBABWE",
            "3097": "SPANAIR",
            "3098": "ASIANA AIRLINES",
            "3099": "CATHAY PACIFIC",
            "3100": "MALAYSIAN AIRLINE SYSTEM",
            "3102": "IBERIA",
            "3103": "GARUDA (INDONESIA",
            "3106": "BRAATHENS S.A.F.E. (NORWAY",
            "3111": "BRITISH MIDLAND",
            "3112": "WINDWARD ISLAND",
            "3117": "VENEZOLANA INTERNATIONAL DE AVIACION (VIASA",
            "3125": "TAN AIRLINES",
            "3127": "TACA INTERNATIONAL",
            "3129": "SURINAM AIRWAYS",
            "3130": "SUNWORLD INTERNATIONAL AIRWAYS",
            "3131": "VLM AIRLINES - VLM",
            "3132": "FRONTIER AIRLINES",
            "3136": "QATAR AIRWAYS COMPANY W.L.L. (QATAR AIR",
            "3144": "VIRGIN ATLANTIC",
            "3146": "LUXAIR",
            "3148": "AIR LITTORAL , S. A.  (LITTORAL",
            "3151": "AIR ZAIRE",
            "3156": "GO FLY LTD. - GOFLY",
            "3159": "PROVINCETOWN-BOSTON AIRWAYS (PBA",
            "3161": "ALL NIPPON AIRWAYS",
            "3164": "NORONTAIR",
            "3167": "AERO CONTINENTE",
            "3171": "CANADIAN AIRLINES",
            "3172": "NATION AIR",
            "3174": "JETBLUE AIRWAYS (JETBLUE",
            "3175": "MIDDLE EAST AIR",
            "3177": "AIRTRANS AIRWAY",
            "3178": "MESA AIR",
            "3180": "WESTJET AIRLINES",
            "3181": "MALEV HUNGARIAN AIRLINES",
            "3182": "LOT - POLISH AIRLINES",
            "3183": "OMAN AIVIATION SERVICES",
            "3184": "LIAT",
            "3185": "LAV LINEA AEROPOSTAL VENEZOLANA",
            "3186": "LAP LINEAS AEREAS PARAGUAYAS",
            "3187": "LACSA (COSTA RICA",
            "3188": "VIRGIN EXPRESS",
            "3190": "JUGOSLAV AIR",
            "3191": "ISLAND AIRLINES",
            "3193": "INDIAN AIRLINES",
            "3196": "HAWAIIAN AIR",
            "3197": "HAVASU AIRLINES",
            "3200": "GUYANA AIRWAYS",
            "3204": "FREEDOM AIRLINES",
            "3206": "CHINA EASTERN AIRLINES",
            "3211": "NORWEGIAN AIR SHUTTLE",
            "3212": "DOMINICANA DE AVIACION",
            "3213": "MALMO AVIATION-MALMO AV",
            "3217": "CSA CESKOSLOVENSKE AEROLINIE",
            "3219": "COMPANIA PANAMENA DE AVIACION (COPA",
            "3220": "COMPANIA FAUCETT",
            "3221": "TRANSPORTES AEREOS MILITARES ECUATORIANOS",
            "3222": "COMMAND AIRWAYS",
            "3223": "COMAIR",
            "3226": "SKYWAYS-SKYWAYS",
            "3228": "CAYMAN AIRWAYS",
            "3229": "SAETA (SOCIEDAD ECUATORIANAS DE TRANSPORTES AEREO",
            "3231": "SAHSA (SERVICIO AERO DE HONDURAS",
            "3234": "CARIBBEAN  AIRLINES",
            "3236": "AIR ARABIA AIRLINE-AIR ARAB",
            "3239": "BAR HARBOR AIRLINES",
            "3240": "BAHAMASAIR",
            "3241": "AVIATECA (GUATEMALA",
            "3242": "AVENSA",
            "3243": "AUSTRIAN AIR SERVICE",
            "3245": "EASYJET",
            "3246": "RYANAIR",
            "3247": "GOL AIRLINES - GOL",
            "3248": "TAM AIRLINES - TAM",
            "3252": "ALM ANTILEAN AIRLINES",
            "3253": "AMERICA WEST",
            "3256": "ALASKA AIRLINES INC",
            "3260": "SPIRIT AIRLINES-SPIRIT",
            "3261": "AIR CHINA",
            "3263": "AERO SERVICIO CARABOBO",
            "3266": "AIR SEYCHELLES",
            "3267": "AIR PANAMA INTERNATIONAL",
            "3280": "AIR JAMAICA",
            "3282": "AIR DJIBOUTI",
            "3285": "AERO PERU",
            "3286": "AERO.NICARAGUENSES",
            "3287": "AERO COACH AVIATION",
            "3292": "CYPRUS AIRWAYS",
            "3293": "EQUATORIANA",
            "3294": "ETHIOPIAN AIRLINES",
            "3295": "KENYA AIRWAYS",
            "3296": "AIR BERLIN",
            "3297": "TAROM ROMANIAN AIR TRANSPORT",
            "3298": "AIR MAURITIUS",
            "3299": "WIDEROES FLYVESELSKAP",
            "3300": "AZUL BRAZILIAN AIRLINES",
            "3301": "WIZZ AIRLINES",
            "3351": "AFFILIATED AUTO RENTAL",
            "3352": "AMERICAN INTERNATIONAL",
            "3353": "BROOKS RENT-A-CAR",
            "3354": "ACTION AUTO RENTAL",
            "3355": "SIXT CAR RENTAL",
            "3357": "HERTZ",
            "3359": "PAYLESS CAR RENTAL",
            "3360": "SNAPPY CAR RENTAL",
            "3361": "AIRWAYS RENT-A-CAR",
            "3362": "ALTRA AUTO RENTAL",
            "3364": "AGENCY RENT-A-CAR",
            "3366": "BUDGET RENT-A-CAR",
            "3368": "HOLIDAY RENT-A-CAR",
            "3370": "RENT-A-WRECK",
            "3374": "ACCENT RENT-A-CAR",
            "3376": "AJAX RENT-A-CAR",
            "3380": "TRIANGLE RENT-A-CAR",
            "3381": "EUROPCAR",
            "3385": "TROPICAL RENT-A-CAR",
            "3386": "SHOWCASE RENTAL CARS",
            "3387": "ALAMO RENT-A-CAR",
            "3388": "MERCHANTS RENT-A-CAR",
            "3389": "AVIS RENT-A-CAR",
            "3390": "DOLLAR RENT-A-CAR",
            "3391": "EUROPE BY CAR",
            "3393": "NATIONAL CAR RENTAL",
            "3394": "KEMWELL GROUP RENT-A-CAR",
            "3395": "THRIFTY CAR RENTAL",
            "3396": "TILDEN RENT-A-CAR",
            "3398": "ECONO CAR RENT-A-CAR",
            "3400": "AUTO HOST CAR RENTAL",
            "3405": "ENTERPRISE RENT-A-CAR",
            "3409": "GENERAL RENT-A-CAR",
            "3412": "A1 RENT-A-CAR",
            "3420": "ANSA INTERNATIONAL",
            "3421": "ALLSTATE RENT-A-CAR",
            "3423": "AVCAR RENT-A-CAR",
            "3425": "AUTOMATE RENT-A-CAR",
            "3427": "AVON RENT-A-CAR",
            "3428": "CAREY RENT-A-CAR",
            "3429": "INSURANCE RENT-A-CAR",
            "3430": "MAJOR RENT- A- CAR",
            "3431": "REPLACEMENT RENT-A-CAR",
            "3432": "RESERVE RENT-A-CAR",
            "3433": "UGLY DUCKLING RENT-A-CAR",
            "3434": "USA RENT-A-CAR",
            "3435": "VALUE RENT-A-CAR",
            "3436": "AUTOHANSA RENT-A-CAR",
            "3438": "INTERENT RENT-A-CAR",
            "3439": "MILLEVILLE RENT-A-CAR",
            "3441": "ADVANTAGE RENT-A-CAR",
            "3501": "HOLIDAY INNS",
            "3502": "BEST WESTERN HOTELS",
            "3503": "SHERATON",
            "3504": "HILTON",
            "3505": "FORTE HOTELS",
            "3506": "GOLDEN TULIP HOTELS",
            "3507": "FRIENDSHIP INNS",
            "3508": "QUALITY INNS",
            "3509": "MARRIOTT",
            "3510": "DAYS INNS",
            "3511": "ARABELLA HOTELS",
            "3512": "INTERCONTINENTAL HOTELS",
            "3513": "WESTIN",
            "3514": "AMERISUITES",
            "3515": "RODEWAY INNS",
            "3516": "LAQUINTA INNS",
            "3517": "AMERICANA HOTELS",
            "3518": "SOL HOTELS",
            "3519": "PULLMAN INTERNATIONAL HOTELS",
            "3520": "MERIDIEN HOTELS",
            "3521": "ROYAL LAHAINA RESORT",
            "3522": "TOKYO HOTEL",
            "3523": "PENINSULA HOTELS",
            "3524": "WELCOMGROUP HOTELS",
            "3525": "DUNFEY HOTELS",
            "3526": "PRINCE HOTELS",
            "3527": "DOWNTOWNER PASSPORT",
            "3528": "RED LION INNS",
            "3529": "CP (CANADIAN PACIFIC) HOTELS",
            "3530": "RENAISSANCE HOTELS",
            "3531": "KAUAI COCONUT BEACH RESORT",
            "3532": "ROYAL KONA RESORT",
            "3533": "HOTEL IBIS",
            "3534": "SOUTHERN PACIFIC HOTEL",
            "3535": "HILTON INTERNATIONAL",
            "3536": "AMFAC HOTELS",
            "3537": "ANA HOTELS",
            "3538": "CONCORDE HOTELS",
            "3539": "SUMMERFIELD SUITES HOTEL",
            "3540": "IBEROTEL HOTELS",
            "3541": "HOTEL OKURA",
            "3542": "ROYAL HOTELS",
            "3543": "FOUR SEASONS HOTELS",
            "3544": "CIGA HOTELS",
            "3545": "SHANGRI-LA INTERNATIONAL",
            "3546": "HOTEL SIERRA",
            "3547": "BREAKERS RESORT",
            "3548": "HOTELS MELIA",
            "3549": "AUBERGE DES GOVERNEURES",
            "3550": "REGAL 8 INNS",
            "3551": "MIRAGE HOTEL AND CASINO",
            "3552": "COAST HOTEL",
            "3553": "PARK INN BY RADISSON",
            "3554": "PINEHURST RESORT",
            "3555": "TREASURE ISLAND HOTEL AND CASINO",
            "3556": "BARTON CREEK RESORT",
            "3557": "MANHATTAN EAST SUITE HOTELS",
            "3558": "JOLLY HOTELS",
            "3559": "CANDLEWOOD SUITES",
            "3560": "ALADDIN RESORT AND CASINO",
            "3561": "GOLDEN NUGGET",
            "3562": "COMFORT INNS",
            "3563": "JOURNEY'S END MOTELS",
            "3564": "SAM'S TOWN HOTEL AND CASINO",
            "3565": "RELAX INNS",
            "3566": "GARDEN PALACE HOTEL",
            "3567": "SOHO GRAND HOTEL",
            "3568": "LADBROKE HOTELS",
            "3569": "TRIBECA GRAND HOTEL",
            "3570": "FORUM HOTELS",
            "3571": "GRAND WAILEA RESORT",
            "3572": "MIYAKO HOTEL",
            "3573": "SANDMAN HOTELS",
            "3574": "VENTURE INN",
            "3575": "VAGABOND HOTELS",
            "3576": "LA QUINTA RESORT",
            "3577": "MANDARIN ORIENTAL HOTELS",
            "3578": "FRANKENMUTH BAVARIAN",
            "3579": "HOTEL MERCURE",
            "3580": "HOTEL DEL CORONADO",
            "3581": "DELTA HOTELS",
            "3582": "CALIFORNIA HOTEL AND CASINO",
            "3583": "RADISSON BLU",
            "3584": "PRINCESS HOTELS INTERNATIONAL",
            "3585": "HUNGAR HOTELS",
            "3586": "SOKOS HOTEL",
            "3587": "DORAL HOTELS",
            "3588": "HELMSLEY HOTELS",
            "3589": "DORAL GOLF RESORT",
            "3590": "FAIRMONT HOTELS",
            "3591": "SONESTA HOTELS",
            "3592": "OMNI HOTELS",
            "3593": "CUNARD HOTELS",
            "3594": "ARIZONA BILTMORE",
            "3595": "HOSPITALITY INNS",
            "3596": "WYNN LAS VEGAS",
            "3597": "RIVERSIDE RESORT AND CASINO",
            "3598": "REGENT INTERNATIONAL  HOTEL",
            "3599": "PANNONIA HOTELS",
            "3600": "SADDLEBROOK RESORT - TAMPA",
            "3601": "TRADEWINDS RESORTS",
            "3602": "HUDSON HOTEL",
            "3603": "NOAH'S HOTEL",
            "3604": "HILTON GARDEN INN",
            "3605": "JURYS DYLE HOTEL GROUP",
            "3606": "JEFFERSON HOTEL",
            "3607": "FONTAINEBLEAU RESORT",
            "3608": "GAYLORD OPRYLAND",
            "3609": "GAYLORD PALMS",
            "3610": "GAYLORD TEXAN",
            "3611": "C MON INN",
            "3612": "MOEVENPICK HOTELS",
            "3613": "MICROTEL INN AND SUITES",
            "3614": "AMERICINN",
            "3615": "TRAVELODGE",
            "3616": "HERMITAGE HOTEL",
            "3617": "AMERICA'S BEST VALUE INN",
            "3618": "GREAT WOLF",
            "3619": "ALOFT HOTELS",
            "3620": "BINION'S HORSESHOE CLUB",
            "3621": "EXTENDED STAY",
            "3622": "MERLIN HOTEL GROUP",
            "3623": "DORINT HOTELS",
            "3624": "LADY LUCK HOTEL AND CASINO",
            "3625": "HOTEL UNIVERSALE",
            "3626": "STUDIO PLUS",
            "3627": "EXTENDED STAY AMERICA",
            "3628": "EXCALIBUR HOTEL AND CASINO",
            "3629": "DAN HOTELS",
            "3630": "EXTENDED STAY DELUXE",
            "3631": "SLEEP INNS",
            "3632": "THE PHOENICIAN",
            "3633": "RANK HOTELS",
            "3634": "SWISSOTEL",
            "3635": "RESO HOTEL",
            "3636": "SAROVA HOTELS",
            "3637": "RAMADA INNS",
            "3638": "HOWARD JOHNSON",
            "3639": "MOUNT CHARLOTTE THISTLE",
            "3640": "HYATT HOTELS",
            "3641": "SOFITEL HOTELS",
            "3642": "NOVOTEL HOTELS",
            "3643": "STEIGENBERGER HOTELS",
            "3644": "ECONOLODGES",
            "3645": "QUEENS MOAT HOUSES",
            "3646": "SWALLOW HOTELS",
            "3647": "HUSA HOTELS",
            "3648": "DE VERA HOTELS",
            "3649": "RADISSON",
            "3650": "RED ROOF INNS",
            "3651": "IMPERIAL LONDON HOTELS",
            "3652": "EMBASSY HOTELS",
            "3653": "PENTA HOTELS",
            "3654": "LOEWS HOTELS",
            "3655": "SCANDIC HOTELS",
            "3656": "SARA HOTELS",
            "3657": "OBEROI HOTELS",
            "3658": "NEW OTANI HOTELS",
            "3659": "TAJ HOTELS INTERNATIONAL",
            "3660": "KNIGHTS INN",
            "3661": "METROPOLE HOTELS",
            "3662": "CIRCUS CIRCUS HOTEL AND CASINO",
            "3663": "HOTELES EL PRESIDENTE",
            "3664": "FLAG INNS",
            "3665": "HAMPTON INN HOTELS",
            "3666": "STAKIS HOTELS",
            "3667": "LUXOR HOTEL AND CASINO",
            "3668": "MARITIM HOTELS",
            "3669": "EL DORADO HOTEL AND CASINO",
            "3670": "ARCADE HOTELS",
            "3671": "ARCTIA HOTELS",
            "3672": "CAMPANILE HOTELS",
            "3673": "IBUSZ HOTELS",
            "3674": "RANTASIPI HOTELS",
            "3675": "INTERHOTEL CEDOK",
            "3676": "MONTE CARLO HOTEL AND CASINO",
            "3677": "CLIMAT DE FRANCE HOTELS",
            "3678": "CUMULUS HOTELS",
            "3679": "SILVER LEGACY HOTEL AND CASINO",
            "3680": "HOTEIS OTHAN",
            "3681": "ADAMS MARK HOTELS",
            "3682": "SAHARA HOTEL AND CASINO",
            "3683": "BRADBURY SUITES",
            "3684": "BUDGET HOSTS INNS",
            "3685": "BUDGETEL INNS",
            "3686": "SUSSE CHALET",
            "3687": "CLARION HOTELS",
            "3688": "COMPRI HOTELS",
            "3689": "CONSORT HOTELS",
            "3690": "COURTYARD BY MARRIOTT",
            "3691": "DILLON INN",
            "3692": "DOUBLETREE",
            "3693": "DRURY INN",
            "3694": "ECONOMY INNS OF AMERICA",
            "3695": "EMBASSY SUITES",
            "3696": "EXCEL INN",
            "3697": "FAIRFIELD HOTELS",
            "3698": "HARLEY HOTELS",
            "3699": "MIDWAY MOTOR LODGE",
            "3700": "MOTEL 6",
            "3701": "LA MANSION DEL RICO",
            "3702": "REGISTRY HOTELS",
            "3703": "RESIDENCE INN",
            "3704": "ROYCE HOTELS",
            "3705": "SANDMAN INN",
            "3706": "SHILO INN",
            "3707": "SHONEY'S INN",
            "3708": "VIRGIN RIVER HOTEL AND CASINO",
            "3709": "SUPER 8 MOTELS",
            "3710": "THE RITZ-CARLTON",
            "3711": "FLAG INNS (AUSTRALIA",
            "3712": "BUFFALO BILL'S HOTEL AND CASINO",
            "3713": "QUALITY PACIFIC HOTEL",
            "3714": "FOUR SEASONS (AUSTRALIA) HOTELS",
            "3715": "FAIRFIELD INN",
            "3716": "CARLTON HOTELS",
            "3717": "CITY LODGE HOTELS",
            "3718": "KAROS HOTELS",
            "3719": "PROTEA HOTELS",
            "3720": "SOUTHERN SUN HOTELS",
            "3721": "CONRAD HOTELS",
            "3722": "WYNDHAM",
            "3723": "RICA HOTELS",
            "3724": "INTER NOR HOTELS",
            "3725": "SEA PINES RESORT",
            "3726": "RIO SUITES",
            "3727": "BROADMOOR HOTEL",
            "3728": "BALLYS HOTEL AND CASINO",
            "3729": "JOHN ASCUAGAS NUGGET",
            "3730": "MGM GRAND HOTEL",
            "3731": "HARRAHS HOTELS AND CASINOS",
            "3732": "OPRYLAND HOTEL",
            "3733": "BOCA RATON RESORT",
            "3734": "HARVEY BRISTOL HOTELS",
            "3735": "MASTERS ECONOMY INNS",
            "3736": "COLORADO BELLE EDGEWATER RESORT",
            "3737": "RIVIERA HOTEL AND CASINO",
            "3738": "TROPICANA RESORT AND CASINO",
            "3739": "WOODSIDE HOTELS AND RESORTS",
            "3740": "TOWNEPLACE SUITES",
            "3741": "MILLENNIUM HOTELS",
            "3742": "CLUB MED",
            "3743": "BILTMORE HOTEL AND SUITES",
            "3744": "CAREFREE RESORTS",
            "3745": "ST. REGIS HOTEL",
            "3746": "ELIOT HOTELS",
            "3747": "CLUB CORP/CLUB RESORTS",
            "3748": "WELLESLEY INNS",
            "3749": "BEVERLY HILLS HOTEL",
            "3750": "CROWNE PLAZA HOTELS",
            "3751": "HOMEWOOD SUITES",
            "3752": "PEABODY HOTELS",
            "3753": "GREENBRIAR RESORTS",
            "3754": "AMELIA ISLAND PLANTATION",
            "3755": "HOMESTEAD",
            "3757": "CANYON RANCH",
            "3758": "KAHALA MANDARIN ORIENTAL HOTEL",
            "3759": "ORCHID AT MAUNA LAI",
            "3760": "HALEKULANI HOTEL/WAIKIKI PARC",
            "3761": "PRIMADONNA HOTEL AND CASINO",
            "3762": "WHISKEY PETE'S HOTEL AND CASINO",
            "3763": "CHATEAU ELAN WINERY AND RESORT",
            "3764": "BEAU RIVAGE HOTEL AND CASINO",
            "3765": "BELLAGIO HOTEL AND CASINO",
            "3766": "FREMONT HOTEL AND CASINO",
            "3767": "MAIN STREET HOTEL AND CASINO",
            "3768": "SILVER STAR HOTEL AND CASINO",
            "3769": "STRATOSPHERE HOTEL AND CASINO",
            "3770": "SPRINGHILL SUITES",
            "3771": "CAESARS HOTEL AND CASINO",
            "3772": "NEMACOLIN WOODLANDS",
            "3773": "VENETIAN RESORT HOTEL AND CASINO",
            "3774": "NEW YORK, NEW YORK HOTEL AND CASINO",
            "3775": "SANDS RESORT",
            "3776": "NEVELE GRANDE RESORT AND COUNTRY CLUB",
            "3777": "MANDALAY BAY RESORT",
            "3778": "FOUR POINTS HOTELS",
            "3779": "W HOTELS",
            "3780": "DISNEY RESORTS",
            "3781": "PATRICIA GRAND RESORT HOTELS",
            "3782": "ROSEN HOTELS & RESORTS",
            "3783": "TOWN AND COUNTRY RESORT & CONVENTION CENTER",
            "3784": "FIRST HOSPITALITY HOTELS",
            "3785": "OUTRIGGER HOTELS AND RESORTS",
            "3786": "OHANA HOTELS OF HAWAII",
            "3787": "CARIBE ROYALE RESORT SUITES & VILLAS",
            "3788": "ALA MOANA HOTEL",
            "3789": "SMUGGLERS' NOTCH RESORT",
            "3790": "RAFFLES HOTELS",
            "3791": "STAYBRIDGE SUITES",
            "3792": "CLARIDGE CASINO HOTEL",
            "3793": "THE FLAMINGO HOTELS",
            "3794": "GRAND CASINO HOTELS",
            "3795": "PARIS LAS VEGAS HOTEL",
            "3796": "PEPPERMILL HOTEL CASINO",
            "3797": "ATLANTIC CITY HILTON",
            "3798": "EMBASSY VACATION RESORT",
            "3799": "HALE KOA HOTEL",
            "3800": "HOMESTEAD SUITES",
            "3801": "WILDERNESS HOTEL AND GOLF RESORT",
            "3802": "THE PALACE HOTEL",
            "3803": "THE WIGWAM GOLF RESORT AND SPA",
            "3804": "THE DIPLOMAT COUNTRY CLUB AND SPA",
            "3805": "THE ATLANTIC",
            "3806": "PRINCEVILLE RESORT",
            "3807": "ELEMENT",
            "3808": "LXR",
            "3809": "SETTLE INN",
            "3810": "LA COSTA RESORT",
            "3811": "PREMIER INN",
            "3812": "HYATT PLACE",
            "3813": "HOTEL INDIGO",
            "3814": "THE ROOSEVELT HOTEL NY",
            "3815": "HOLIDAY INN NICKELODEON",
            "3817": "AFFINIA",
            "3818": "MAINSTAY SUITES",
            "3819": "OXFORD SUITES",
            "3820": "JUMEIRAH ESSEX HOUSE",
            "3821": "CARIBE ROYALE",
            "3822": "CROSSLAND",
            "3823": "GRAND SIERRA RESORT",
            "3824": "ARIA",
            "3825": "VDARA",
            "3826": "AUTOGRAPH",
            "3827": "GALT HOUSE",
            "3828": "COSMOPOLITAN OF LAS VEGAS",
            "3829": "Country Inn by Carlson",
            "3830": "Park Plaza Hotel",
            "3831": "Waldorf",
            "4011": "RAILROADS - FREIGHT",
            "4111": "TRANSPRTN-SUBRBN & LOCAL COMTR PSNGR, INCL FERRIES",
            "4112": "PASSENGER RAILWAYS",
            "4119": "AMBULANCE SERVICES",
            "4121": "LIMOUSINES AND TAXICABS",
            "4131": "BUS LINES",
            "4214": "FREIGHT CARRIER,TRUCKING-LCL/LNG DIST, MVG/STORAGE",
            "4215": "COURIER SVC-AIR & GROUND, FREIGHT FORWARDERS",
            "4225": "PUBLIC WAREHOUSING-FARM, REFRIG GOODS, HHG STORAGE",
            "4411": "CRUISE LINES",
            "4457": "BOAT LEASES AND BOAT RENTALS",
            "4468": "MARINAS, MARINE SERVICE/SUPPLIES",
            "4511": "AIR CARRIERS, AIRLINES-NOT ELSEWHERE CLASSIFIED",
            "4582": "AIRPORTS, AIRPORT TERMINALS, FLYING FIELDS",
            "4722": "TRAVEL AGENCIES AND TOUR OPERATORS",
            "4784": "BRIDGE AND ROAD FEES, TOLLS",
            "4789": "TRANSPORTATION SERVICES NOT ELSEWHERE CLASSIFIED",
            "4812": "TELECOMMUNICATION EQUIPMENT INCL TELEPHONE SALES",
            "4813": "KEYENTRY TELE MERCNT LCL/LNG DIST. NON FACE TOFACE",
            "4814": "TELECOM INCL PREPAID/RECURRING PHONE SVCS",
            "4816": "COMPUTER NETWORK/INFORMATION SERVICES",
            "4821": "TELEGRAPH SERVICES",
            "4829": "MONEY TRANSFER",
            "4899": "CABLE, SATELLITE, OTHER PAY TELEVISION, RADIO SVCS",
            "4900": "UTLTS-ELCTRC, GAS, HEATING OIL, SANITARY, WATER",
            "5013": "MOTOR VEHICLE SUPPLIES AND NEW PARTS",
            "5021": "OFFICE AND COMMERCIAL FURNITURE",
            "5039": "CONSTRUCTION MATERIALS NOT ELSEWHERE CLASSIFIED",
            "5044": "OFFICE PHOTOGRAPHIC PHOTOCOPY & MICROFILM EQUIPMT",
            "5045": "COMPUTERS, COMPUTER PERIPHERAL EQUIPMENT, SOFTWARE",
            "5046": "COMMERCIAL EQUIPMENT, NOT ELSEWHERE CLASSIFIED",
            "5047": "DENTAL/LAB/MED/OPHTHALMIC HOSP EQUIP & SUPPLIES",
            "5051": "METAL SERVICE CENTERS AND OFFICES",
            "5065": "ELECTRICAL PARTS AND EQUIPMENT",
            "5072": "HARDWARE EQUIPMENT AND SUPPLIES",
            "5074": "PLUMBING AND HEATING EQUIPMENT",
            "5085": "INDUSTRIAL SUPPLIES NOT ELSEWHERE CLASSIFIED",
            "5094": "PRECIOUS STONES AND METALS, WATCHES AND JEWELRY",
            "5099": "DURABLE GOODS, NOT ELSEWHERE CLASSIFIED",
            "5111": "STATIONERY/OFFICE SUPPLIES/PRINTING & WRITING PAP",
            "5122": "DRUGS, DRUP PROPRIETARIES, AND DRUGGIST'S SUPPLIES",
            "5131": "PIECE GOODS,NOTIONS,AND OTHER DRY GOODS",
            "5137": "MEN'S/WOMEN'S/CHILDREN'S UNIFORMS/COMMERCIAL CLOTH",
            "5139": "COMMERCIAL FOOTWEAR",
            "5169": "CHEMICALS/ALLIED PRODUCTS NOT ELSEWHERE CLASSIFIED",
            "5172": "PETROLEUM AND PETROLEUM PRODUCTS",
            "5192": "BOOKS,PERIODICALS AND NEWSPAPERS",
            "5193": "FLORIST SUPPLIES,NURSERY STOCK & FLOWERS",
            "5198": "PAINTS,VARNISHES AND SUPPLIES",
            "5199": "NONDURABLE GOODS (NOT ELSEWHERE CLASSIFIED",
            "5200": "HOME SUPPLY WAREHOUSE STORES",
            "5211": "BUILDING MATERIALS, LUMBER STORES",
            "5231": "GLASS, PAINT, WALLPAPER STORES",
            "5251": "HARDWARE STORES",
            "5261": "LAWN AND GARDEN SUPPLY STORES",
            "5271": "MOBILE HOME DEALERS",
            "5300": "WHOLESALE CLUBS",
            "5309": "DUTY FREE STORES",
            "5310": "DISCOUNT STORES",
            "5311": "DEPARTMENT STORES",
            "5331": "VARIETY STORES",
            "5399": "MISCELLANEOUS GENERAL MERCHANDISE",
            "5411": "GROCERY STORES, SUPERMARKETS",
            "5422": "FREEZER, LOCKER MEAT PROVISIONERS",
            "5441": "CANDY, NUT, CONFECTIONERY STORES",
            "5451": "DAIRY PRODUCTS STORES",
            "5462": "BAKERIES",
            "5499": "MISC FOOD STORE-CONVENIENCE,MRKT,SPLTY,VENDNG MACS",
            "5511": "AUTO & TRUCK DLRS-SALES,SVC, REPRS,PRTS, & LEASING",
            "5521": "AUTOMOBILE AND TRUCK DEALERS-(USED ONLY)-SALES",
            "5531": "AUTO STORE, HOME SUPPLY STORES",
            "5532": "AUTOMOTIVE TIRE STORES",
            "5533": "AUTOMOTIVE PARTS, ACCESSORIES STORES",
            "5541": "SERVICE STATIONS WITH OR WITHOUT ANCILLARY SERVICE",
            "5542": "FUEL DISPENSER, AUTOMATED",
            "5551": "BOAT DEALERS",
            "5561": "CAMPER DEALERS, RECREATIONAL AND UTILITY TRAILERS",
            "5571": "MOTORCYCLE SHOPS AND DEALERS",
            "5592": "MOTOR HOME DEALERS",
            "5598": "SNOWMOBILE DEALERS",
            "5599": "MISC/AUTO/AIRCRAFT/FARM EQUIP  NOT ELSEWHERE CLASS",
            "5611": "MEN'S AND BOY'S CLOTHING AND ACCESSORIES STORES",
            "5621": "WOMEN'S READY TO WEAR STORES",
            "5631": "WOMEN'S ACCESSORY AND SPECIALTY STORES",
            "5641": "CHILDREN'S AND INFANT'S WEAR STORES",
            "5651": "FAMILY CLOTHING STORES",
            "5655": "SPORTS APPAREL, RIDING APPAREL STORES",
            "5661": "SHOE STORES",
            "5681": "FURRIERS AND FUR SHOPS",
            "5691": "MEN'S AND WOMEN'S CLOTHING STORES",
            "5697": "ALTERATIONS, MENDING, SEAMSTRESSES, TAILORS",
            "5698": "WIG AND TOUPEE SHOPS",
            "5699": "ACCESSORY AND APPAREL STORES-MISCELLANEOUS",
            "5712": "EQUIP, FURNITURE, HOME FURNSHNGS STRS (EXCPT APPL",
            "5713": "FLOOR COVERING STORES",
            "5714": "DRAPERY, UPOLSTERY, AND WINDOW COVERINGS STORES",
            "5718": "FIREPLACE, FIREPLACE SCREENS & ACCESSORIES STORES",
            "5719": "MISCELLANEOUS HOUSE FURNISHING SPECIALTY SHOPS",
            "5722": "HOUSEHOLD APPLIANCE STORES",
            "5732": "ELECTRONIC SALES",
            "5733": "MUSIC STORES-INSTRUMENTS, PIANOS, SHEET MUSIC",
            "5734": "COMPUTER SOFTWARE STORES",
            "5735": "RECORD SHOPS",
            "5811": "CATERERS",
            "5812": "EATING PLACES, RESTAURANTS",
            "5813": "BAR,LOUNGE,DISCO,NIGHTCLUB,TAVERN-ALCOHOLIC DRINKS",
            "5814": "FAST FOOD RESTAURANTS",
            "5815": "DIGITAL GOODS – AUDIOVISUAL MEDIA INCLUDING BOOKS, MOVIES, AND MUSIC",
            "5816": "DIGITAL GOODS – GAMES",
            "5817": "DIGITAL GOODS – SOFTWARE APPLICATIONS (EXCLUDING GAMES",
            "5818": "DIGITAL GOODS – MULTI-CATEGORY",
            "5912": "DRUG STORES, PHARMACIES",
            "5921": "PACKAGE STORES, BEER, WINE, LIQUOR",
            "5931": "SECOND HAND STORES, USED MERCHANDISE STORES",
            "5932": "ANTIQUE SHOPS-SALES,REPAIRS,RESTORATION SERVICES",
            "5933": "PAWN SHOPS",
            "5935": "SALVAGE AND WRECKING YARDS",
            "5937": "ANTIQUE REPRODUCTION STORES",
            "5940": "BICYCLE SHOPS-SALES AND SERVICE",
            "5941": "SPORTING GOODS STORES",
            "5942": "BOOK STORES",
            "5943": "OFFICE, SCHOOL SUPPLY, AND STATIONERY STORES",
            "5944": "CLOCK, JEWELRY, WATCH, AND SILVERWARE STORE",
            "5945": "GAME, TOY, AND HOBBY SHOPS",
            "5946": "CAMERA AND PHOTOGRAPHIC SUPPLY STORES",
            "5947": "GIFT, CARD, NOVELTY AND SOUVENIR SHOPS",
            "5948": "LEATHER GOODS AND LUGGAGE STORES",
            "5949": "FABRIC, NEEDLEWORK, PIECE GOODS, AND SEWING STORES",
            "5950": "CRYSTAL AND GLASSWARE STORES",
            "5960": "DIRECT MARKETING-INSURANCE SERVICES",
            "5962": "DIRECT MARKETING-TRAVEL RELATED ARRANGEMENT SERVS",
            "5963": "DOOR-TO-DOOR SALES",
            "5964": "DIRECT MARKETING-CATALOG MERCHANTS",
            "5965": "DIRECT MARKETING-COMBINATION CATALOG/RETAIL MERCH",
            "5966": "DIRECT MARKETING-OUTBOUND TELEMARKETING MERCHANTS",
            "5967": "DIRECT MARKETING-INBOUND TELEMARKETING MERCHANTS",
            "5968": "DIRECT MARKETING-CONTINUITY/SUBSCRIPTION MERCHANTS",
            "5969": "DIRECT MARKETING-OTHER DIRECT MARKETERS/NOT ELSEW",
            "5970": "ARTIST SUPPLY STORES, CRAFT SHOPS",
            "5971": "ART DEALERS AND GALLERIES",
            "5972": "STAMP & COIN STORES-PHILATELIC & NUMISMATIC SUPPLY",
            "5973": "RELIGIOUS GOODS STORES",
            "5975": "HEARING AIDS-SALES, SERVICE, SUPPLY STORES",
            "5976": "ORTHOPEDIC GOODS-ARTIFICIAL LIMB STORES",
            "5977": "COSMETIC STORES",
            "5978": "TYPEWRITER STORES-RENTALS, SALES, SERVICE",
            "5983": "FUEL DEALERS-COAL, FUEL OIL, LIQ PETROLEUM, WOOD",
            "5992": "FLORISTS",
            "5993": "CIGAR STORES AND STANDS",
            "5994": "NEWS DEALERS AND NEWSSTANDS",
            "5995": "PET SHOPS - PET FOODS AND SUPPLIES",
            "5996": "SWIMMING POOLS - SALES AND SUPPLIES",
            "5997": "ELECTRIC RAZOR STORES - SALES AND SERVICE",
            "5998": "TENT AND AWNING SHOPS",
            "5999": "MISCELLANEOUS AND SPECIALTY RETAIL STORES",
            "6010": "MANUAL CASH DISBURSEMENTS-CUSTOMER FINANCIAL INSTITUTION",
            "6011": "AUTOMATED CASH DISBURSEMENTS-CUSTOMER FINANCIAL INSTITUTION",
            "6012": "MERCHANDISE AND SERVICES--CUSTOMER FINANCIAL INSTITUTION",
            "6050": "QUASI CASH - CUSTOMER FINANCIAL INSTITUTION",
            "6051": "QUASI CASH-MERCHANT",
            "6211": "SECURITIES-BROKERS/DEALERS",
            "6300": "INSURANCE SALES,UNDERWRITING,AND PREMIUMS",
            "6313": "REAL ESTATE AGENTS AND MANAGERS-RENTALS",
            "6532": "PAYMENT TRANSACTION--CUSTOMER FINANCIAL INSTITUTION",
            "6533": "PAYMENT TRANSACTION--MERCHANT",
            "6536": "MONEYSEND - INTRACOUNTRY",
            "6537": "MONEYSEND - INTERCOUNTRY",
            "6538": "MONEYSEND FUNDING",
            "6540": "POI FUNDINGTRANSACTIONS EXCLUDING MONEYSEND",
            "7011": "LODGING-HOTELS,MOTELS,RESORTS-NOT CLASSIFIED",
            "7012": "TIMESHARES",
            "7032": "RECREATIONAL AND SPORTING CAMPS",
            "7033": "CAMPGROUNDS AND TRAILER PARKS",
            "7210": "CLEANING, GARMENT, AND LAUNDRY SERVICES",
            "7211": "LAUNDRY SERVICES - FAMILY AND COMMERICAL",
            "7216": "DRY CLEANERS",
            "7217": "CARPET AND UPHOLSTERY CLEANING",
            "7221": "PHOTOGRAPHIC STUDIOS",
            "7230": "BARBER AND BEAUTY SHOPS",
            "7251": "HAT CLEANING SHOPS, SHOE REPAIR SHOPS, SHOE SHINE",
            "7261": "FUNERAL SERVICE AND CREMATORIES",
            "7273": "DATING SERVICES",
            "7276": "TAX PREPARATION SERVICE",
            "7277": "DEBT, MARRIAGE, PERSONAL-COUNSELING SERVICE",
            "7278": "BUYING/SHOPPING CLUBS, SERVICES",
            "7296": "CLOTHING RENTAL-COSTUMES,UNIFORMS,FORMAL WEAR",
            "7297": "MASSAGE PARLORS",
            "7298": "HEALTH  AND BEAUTY SPAS",
            "7299": "OTHER SERVICES (NOT ELSEWHERE CLASSIFIED",
            "7311": "ADVERTISING SERVICES",
            "7321": "CONSUMER CREDIT REPORTING AGENCIES",
            "7333": "COMMERCIAL ART, GRAPHICS, PHOTOGRAPHY",
            "7338": "QUICK COPY,REPRODUCTION AND BLUEPRINTING SERVICES",
            "7339": "STENOGRAPHIC AND SECRETARIAL SUPPORT SERVICES",
            "7342": "EXTERMINATING AND DISINFECTING SERVICES",
            "7349": "CLEANING AND MAINTENANCE, JANITORIAL SERVICES",
            "7361": "EMPLOYMENT AGENCIES, TEMPORARY HELP SERVICES",
            "7372": "COMP PROGRAMING,DATA PRCSNG,INTGRTD SYS DSGN SRVS",
            "7375": "INFORMATION RETRIEVAL SERVICES",
            "7379": "COMPUTER MAIN./REPAIR/SERVICES NOT ELSEWHERE CLASS",
            "7392": "CONSULTING, MANAGEMENT, AND PUBLIC RELATIONS SVCS",
            "7393": "DETECTVE/PROTECTVE AGNCY,SECURITY SRVS, ARMOR CARS",
            "7394": "EQUIPMENT RENTAL&LEASING SVS, FURNTURE/TOOL RENTAL",
            "7395": "PHOTO DEVELOPING, PHOTOFINISHING LABORATORIES",
            "7399": "BUSINESS SERVICES-NOT ELSEWHERE CLASSIFIED",
            "7512": "AUTOMOBILE RENTAL AGENCY-NOT ELSEWHERE CLASSIFIED",
            "7513": "TRUCK RENTAL",
            "7519": "MOTOR HOME AND RECREATIONAL VEHICLE RENTAL",
            "7523": "AUTOMOBILE PARKING LOTS AND GARAGES",
            "7531": "AUTOMOTIVE BODY REPAIR SHOPS",
            "7534": "TIRE RETREADING AND REPAIR SHOPS",
            "7535": "AUTOMOTIVE PAINT SHOPS",
            "7538": "AUTOMOTIVE SERVICE SHOPS",
            "7542": "CAR WASHES",
            "7549": "TOWING SERVICES",
            "7622": "ELECTRONIC REPAIR SHOPS",
            "7623": "AIR CONDITIONING AND REFRIGERATION REPAIR SHOPS",
            "7629": "ELECTRICAL AND SMALL APPLIANCE REPAIR SHOPS",
            "7631": "CLOCK, JEWELRY, AND WATCH REPAIR SHOPS",
            "7641": "FURNITURE-REUPHOLSTERY AND REPAIR, REFINISHING",
            "7692": "WELDING REPAIR",
            "7699": "MISCELLANEOUS REPAIR SHOPS AND RELATED SERVICES",
            "7829": "MOTION PICTURE/VIDEO TAPE PRODUCTION/DISTRIBUTION",
            "7832": "MOTION PICTURE THEATERS",
            "7841": "VIDEO ENTERTAINMENT RENTAL STORES",
            "7911": "DANCE HALLS, SCHOOLS, AND STUDIOS",
            "7922": "THEATRICAL PRODUCERS(EXCL MOTION PIX),TICKET AGNCY",
            "7929": "BANDS, ORCHESTRAS, & MISC ENTRTNRS-NOT ELSWHR CLAS",
            "7932": "POOL AND BILLIARD ESTABLISHMENTS",
            "7933": "BOWLING ALLEYS",
            "7941": "ATHLTIC FIELDS,COMMRCL SPRT,SPRT CLBS,SPRT PROMOTR",
            "7991": "TOURIST ATTRACTIONS AND EXHIBITS",
            "7992": "GOLF COURSES-PUBLIC",
            "7993": "VIDEO AMUSEMENT GAME SUPPLIES",
            "7994": "VIDEO GAME ARCADES/ESTABLISHMENTS",
            "7995": "GAMBLING TRANSACTIONS",
            "7996": "AMUSEMENT PARKS,CARNIVALS,CIRCUS,FORTUNE TELLERS",
            "7997": "CLUBS-CNTRY,MBRSHIP(ATHLET,REC,SPRTS,PRIVATE GOLF",
            "7998": "AQUARIUMS, DOLPHINARIUMS, AND SEAQUARIUMS",
            "7999": "RECREATION SERVICES (NOT ELSEWHERE CLASSIFIED",
            "8011": "DOCTORS, (NOT ELSEWHERE CLASSIFIED",
            "8021": "DENTISTS, ORTHODONTISTS",
            "8031": "OSTEOPATHIC PHYSICIANS",
            "8041": "CHIROPRACTORS",
            "8042": "OPTOMETRISTS, OPHTHALMOLOGISTS",
            "8043": "OPTICIANS,OPTICAL GOODS & EYEGLASSES",
            "8049": "CHIROPODISTS, PODIATRISTS",
            "8050": "NURSING AND PERSONAL CARE FACILITIES",
            "8062": "HOSPITALS",
            "8071": "MEDICAL AND DENTAL LABORATORIES",
            "8099": "HEALTH PRACTITIONERS, MEDICAL SRVCS-NOT ELSEWHERE",
            "8111": "ATTORNEYS, LEGAL SERVICES",
            "8211": "SCHOOLS, ELEMENTARY AND SECONDARY",
            "8220": "COLLEGES, UNIV, PRO SCHOOLS, JUNIOR COLLEGES",
            "8241": "SCHOOLS, CORRESPONDENCE",
            "8244": "SCHOOLS, BUSINESS AND SECRETARIAL",
            "8249": "SCHOOLS, TRADE AND VOCATIONAL",
            "8299": "SCHOOLS & EDUCATIONAL SVC-NOT ELSEWHERE CLASSIFIED",
            "8351": "CHILD CARE SERVICES",
            "8398": "ORGANIZATIONS, CHARITABLE AND SOCIAL SERVICES",
            "8641": "ASSOCIATIONS-CIVIC, SOCIAL, AND FRATERNAL",
            "8651": "ORGANIZATIONS, POLITICAL",
            "8661": "ORGANIZATIONS, RELIGIOUS",
            "8675": "AUTOMOBILE ASSOCIATIONS",
            "8699": "ORGANIZATIONS, MEMBERSHIP-NOT ELSEWHERE CLASSIFIED",
            "8734": "TESTING LABORATORIES (NON-MEDICAL",
            "8911": "ARCHITECTURAL, ENGINEERING, AND SURVEYING SERVICES",
            "8931": "ACCOUNTING, AUDITING AND BOOKKEEPING SERVICES",
            "8999": "PROFESSIONAL SERVICES-NOT ELSEWHERE CLASSIFIED",
            "9211": "COURT COSTS INCLUDING ALIMONY AND CHILD SUPPORT",
            "9222": "FINES",
            "9223": "BAIL AND BOND PAYMENTS",
            "9311": "TAX PAYMENTS",
            "9399": "GOVERNMENT SERVICES-NOT ELSEWHERE CLASSIFIED",
            "9402": "POSTAL SERVICES-GOVERNMENT ONLY",
            "9405": "INTRA-GOVERNMENT PURCHASES-GOVERNMENT ONLY"
        }
        return mcc_dict.get(mcc, "None")

    def make_group_tran_type_desc(self,tran_type):
        """
        根据tran_type，返回对应的描述
        :return:
        """
        tran_type_dic = {
            "22000001":"Pre-authorization completion",
            "21000002":"Purchase",
            "21000003":"Cash withdrawal",
            "21010010":"Funding",
            "21010011":"Payment",
            "21000005":"Deposit",
            "21000006":"Refund",
            "21000007":"Recurring",
            "21000008":"Original Credit",
            "22011001":"Manual pre-authorization completion",
            "21011006":"Manual Refund"
        }
        return tran_type_dic.get(tran_type,"None")

    def make_acq_merch_city_data(self):
        """可疑收单城市，国外"""
        res = random.choice(['DIXON', 'MANHATTAN BEACH', 'BROOKLYN', 'WALNUT CREEK', 'BELLEVUE', 'CHARLOTTE', 'ENFIELD', 'RANCHO CUCAMONGA', 'WALNUT', 'HOMEWOOD', 'BIG SUR', 'SEATTLE', 'NEW YORK', 'BOCA RATON', 'DENVER', 'PORTLAND', 'EMERYVILLE', 'SAN FRANCISCO', 'SAN JOSE', 'NORTH HOLLYWOOD', 'PLANTATION', 'TRUCKEE', '866-479-2873', 'FAIRFIELD', 'PITTSBURGH', 'SHERMAN OAKS', 'BENICIA', 'LEAWOOD', 'LONDON', 'BERKELEY', 'SCHIPHOL-RIJK', '312-288-6424', '877-SEPHORA', 'HELP.EA.COM', 'FORT WORTH', '800-266-2278', 'GOLETA', 'PLEASANTON', 'BURBANK', '212-219-0175', 'AUCKLAND', 'SANTA BARBARA', 'BOSTON', 'CARLSTADT', 'LINCOLN', 'JEFFERSONVILLE', 'MALVERN', 'FREMONT', '800-3420768', 'MEMPHIS', 'BRENTWOOD', 'MIAMI BEACH', 'WEST SACRAMENTO', 'DUBLIN', 'PHILADELPHIA', 'CORAL GABLES', 'LONG ISLAND CITY', 'VERSAILLES', '503-3493967', 'MARATHON', 'LOS ANGELES', 'LAS VEGAS', 'CARLSBAD', 'ORANGE', 'ADOBE.LY/ENCA', 'OAKLAND', 'MARSHALL', 'FAIR OAKS', 'CUPERTINO', 'WESTMINSTER', 'RUTHERFORD', 'RICHMOND', 'STUDIO CITY', 'RICHFIELD', 'ELK GROVE', 'FOREST HILLS', 'UNION CITY', 'RANCHO CORDOVA', 'SODA SPRINGS', 'CAMPBELL', 'HALIFAX', 'KEY WEST', 'MILPITAS', 'CEDAR RAPIDS', 'PRINCETON', 'MIAMI', 'RIO VISTA', 'DALLAS', 'SAN BRUNO', 'HAYWARD', 'WOODLAND', 'MORENO VALLEY', 'CONCORD', 'FINANCIAL DIS', 'GRASS VALLEY', 'LIVERMORE', 'MILWAUKEE', 'CITY UNKNOWN', 'WILMINGTON', '866-4786251', 'WASHINGTON', 'BERLIN', 'CHICAGO', 'EL GRANADA', 'SACRAMENTO', 'SAN JUAN', 'MASON', 'DAVIS', 'JACKSONVILLE', 'MOUNTAIN VIEW', 'CARSON', 'AUSTIN', 'WINDSOR', 'PALO ALTO', '212-4601500', 'NORWALK'])
        return res